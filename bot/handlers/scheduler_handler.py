# bot/handlers/scheduler_handler.py
import json
import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from aiogram.types.inline_keyboard_button import InlineKeyboardButton
from apscheduler.triggers.cron import CronTrigger

import config
from bot.database.db_manager import db_manager
from bot.keyboards import (
    scheduler_menu_keyboard, scheduler_task_type_keyboard, settings_keyboard
)
from bot.middlewares import check_subscription
from bot.scheduler_manager import scheduler_manager
from bot.states import SchedulerStates

router = Router()
logger = logging.getLogger(__name__)

async def show_scheduler_menu(message: Message, user_id: int):
    """Displays the scheduler menu for a user."""
    tasks_from_db = await db_manager.get_scheduled_tasks_for_user(user_id)
    
    # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    enriched_tasks = []
    if scheduler_manager:
        for task in tasks_from_db:
            job_details = scheduler_manager.get_job_details(task['job_id'])
            if job_details:
                task['next_run_time'] = job_details.get('next_run_time')
            enriched_tasks.append(task)
    else:
        enriched_tasks = tasks_from_db

    text = "üóìÔ∏è <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
    if not enriched_tasks:
        text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
    
    await message.answer(text, reply_markup=scheduler_menu_keyboard(enriched_tasks))

@router.message(F.text == "üóìÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
async def scheduler_menu_command(message: Message):
    await show_scheduler_menu(message, message.from_user.id)

@router.callback_query(F.data.startswith("delete_task_"))
async def delete_scheduled_task(query: CallbackQuery):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    job_id = query.data.split('_')[-1]
    if not scheduler_manager:
        await query.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return
    
    await scheduler_manager.remove_task(job_id)
    await query.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    
    tasks = await db_manager.get_scheduled_tasks_for_user(query.from_user.id)
    await query.message.edit_reply_markup(reply_markup=scheduler_menu_keyboard(tasks))

@router.callback_query(F.data == "schedule_new_task")
async def schedule_new_task_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await state.set_state(SchedulerStates.choose_task_type)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=scheduler_task_type_keyboard())
    await query.answer()

@router.callback_query(F.data == "schedule_cancel")
async def schedule_cancel(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.delete()
    await query.answer()

@router.callback_query(F.data == "schedule_type_spam", SchedulerStates.choose_task_type)
async def schedule_spam_chosen(query: CallbackQuery, state: FSMContext):
    await state.update_data(task_type='spam')
    await state.set_state(SchedulerStates.enter_cron)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>CRON</b>.\n\n"
        "<code>–º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å_–º–µ—Å—è—Ü–∞ –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>0 9 * * *</code> ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00\n"
        "‚Ä¢ <code>*/30 * * * *</code> ‚Äî –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ <code>0 12 * * 1-5</code> ‚Äî –ø–æ –±—É–¥–Ω—è–º –≤ 12:00\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await query.answer()

@router.callback_query(F.data == "schedule_type_attack", SchedulerStates.choose_task_type)
async def schedule_attack_chosen(query: CallbackQuery, state: FSMContext):
    await state.update_data(task_type='attack')
    await state.set_state(SchedulerStates.enter_cron)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>CRON</b>.\n\n"
        "<code>–º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å_–º–µ—Å—è—Ü–∞ –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>0 9 * * *</code> ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00\n"
        "‚Ä¢ <code>*/30 * * * *</code> ‚Äî –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ <code>0 12 * * 1-5</code> ‚Äî –ø–æ –±—É–¥–Ω—è–º –≤ 12:00\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await query.answer()

@router.message(SchedulerStates.enter_cron)
async def schedule_cron_received(message: Message, state: FSMContext):
    cron_expression = message.text.strip()
    try:
        CronTrigger.from_crontab(cron_expression)
    except ValueError as e:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CRON: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(cron=cron_expression)
    data = await state.get_data()
    
    if data['task_type'] == 'spam':
        await state.set_state(SchedulerStates.enter_spam_params)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ —Å–ø–∞–º–∞.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '<b>all</b>' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    elif data['task_type'] == 'attack':
        await state.set_state(SchedulerStates.enter_attack_mode)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –û–¥–∏–Ω —é–∑–µ—Ä", callback_data="sched_attack_mode_single")],
            [InlineKeyboardButton(text="üë• –°–æ–±—Ä–∞–Ω–Ω–∞—è –±–∞–∑–∞", callback_data="sched_attack_mode_mass")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ç–∞–∫–∏:", reply_markup=markup)


@router.message(SchedulerStates.enter_spam_params)
async def schedule_spam_params_received(message: Message, state: FSMContext):
    session_input = message.text.strip().lower()
    session_limit = None
    if session_input != 'all':
        try:
            session_limit = int(session_input)
            if session_limit <= 0:
                await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'.")
            return
    
    if not scheduler_manager:
        await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.", reply_markup=settings_keyboard())
        await state.clear()
        return

    data = await state.get_data()
    task_params = {'session_limit': session_limit}
    
    await scheduler_manager.add_task(user_id=message.from_user.id, task_type=data['task_type'], cron_expression=data['cron'], task_params=task_params)
    
    await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=settings_keyboard())
    await state.clear()


# --- Attack Scheduling Handlers ---

@router.callback_query(F.data.startswith("sched_attack_mode_"), SchedulerStates.enter_attack_mode)
async def schedule_attack_mode_chosen(query: CallbackQuery, state: FSMContext):
    mode = query.data.split('_')[-1]  # 'single' or 'mass'
    await state.update_data(attack_mode=mode)

    if mode == 'single':
        await state.set_state(SchedulerStates.enter_attack_target)
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).")
    else:  # mass
        await state.set_state(SchedulerStates.enter_attack_count)
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ 1 —é–∑–µ—Ä–∞ –∏–∑ –±–∞–∑—ã.")
    await query.answer()


@router.message(SchedulerStates.enter_attack_target)
async def schedule_attack_target_received(message: Message, state: FSMContext):
    target_input = message.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥, —á—Ç–æ–±—ã Pyrogram –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    # –∏ –æ–±—ã—á–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã, –∫–∞–∫ –∏ –≤ attack_handler.
    normalized_target = target_input
    if normalized_target.startswith(('http://t.me/', 'https://t.me/')):
        path_part = normalized_target.split('t.me/')[1]
        if not path_part.startswith(('joinchat', '+')):
            normalized_target = '@' + path_part.split('/')[0]
    elif not normalized_target.startswith('@'):
        normalized_target = '@' + normalized_target

    await state.update_data(target_nickname=normalized_target)
    await state.set_state(SchedulerStates.enter_attack_count)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")


@router.message(SchedulerStates.enter_attack_count)
async def schedule_attack_count_received(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count < 1:
            await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1.")
            return
        await state.update_data(message_count=count)
        await state.set_state(SchedulerStates.enter_attack_delay)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω: {config.MIN_DELAY_FOR_ATTACK}).")
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(SchedulerStates.enter_attack_delay)
async def schedule_attack_delay_received(message: Message, state: FSMContext):
    try:
        delay = float(message.text.strip().replace(',', '.'))
        if delay < config.MIN_DELAY_FOR_ATTACK:
            await message.reply(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - {config.MIN_DELAY_FOR_ATTACK} —Å–µ–∫.")
            return
        await state.update_data(attack_delay=delay)
        await state.set_state(SchedulerStates.enter_attack_sessions)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ –∞—Ç–∞–∫–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '<b>all</b>' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(SchedulerStates.enter_attack_sessions)
async def schedule_attack_sessions_received(message: Message, state: FSMContext):
    session_input = message.text.strip().lower()
    session_limit = None
    if session_input != 'all':
        try:
            session_limit = int(session_input)
            if session_limit <= 0:
                await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'.")
            return

    if not scheduler_manager:
        await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.", reply_markup=settings_keyboard())
        await state.clear()
        return

    data = await state.get_data()
    user_id = message.from_user.id

    # Get user's current AI settings to pass to the task
    ai_settings = await db_manager.get_ai_settings(user_id)

    task_params = {
        'session_limit': session_limit,
        'attack_mode': data.get('attack_mode'),
        'target_nickname': data.get('target_nickname'),
        'message_count': data.get('message_count'),
        'attack_delay': data.get('attack_delay'),
        'use_ai': ai_settings.get('enabled', False)  # Use current AI setting
    }

    await scheduler_manager.add_task(
        user_id=user_id, task_type=data['task_type'],
        cron_expression=data['cron'], task_params=task_params
    )

    await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '–ê—Ç–∞–∫–∞ –≤ –õ–°' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=settings_keyboard())
    await state.clear()