# bot/handlers/settings_sessions.py
import asyncio
import html
import logging
import os
import re

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram import Client
# Pyrogram imports for session handling
from pyrogram.errors import (
    AuthKeyUnregistered, FloodWait, PhoneCodeExpired, PhoneCodeInvalid,
    PhoneNumberInvalid, SessionPasswordNeeded, UserDeactivated
)
from telethon import TelegramClient
from telethon.errors import (
    SessionPasswordNeededError, PhoneCodeInvalidError, FloodWaitError,
    PhoneNumberBannedError, AuthKeyUnregisteredError, UserDeactivatedError
)
from telethon.sessions import StringSession

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
import config
# --- –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—ç—à –∏ –µ–≥–æ –ª–æ–∫ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
from bot.client_tasks.client_manager import (
    validate_user_sessions, SESSION_VALIDATION_CACHE, SESSION_VALIDATION_CACHE_LOCK, FSM_TELETHON_CLIENTS
)
from bot.database.db_manager import db_manager
from bot.keyboards import sessions_keyboard_markup, settings_keyboard, main_keyboard, select_client_type_keyboard
from bot.middlewares import check_subscription
from bot.states import SessionStates

class FSMClient(Client):
    """
    A Pyrogram Client subclass that prevents the default interactive
    authorization flow (console prompts). This is intended for use with
    an FSM-based authorization flow, where the bot asks the user for
    details in the chat.
    """
    async def authorize(self):
        # Override the default authorize method to do nothing.
        # The FSM handlers will call send_code, sign_in, etc., manually.
        pass

router = Router()
logger = logging.getLogger(__name__)
FSM_CLIENTS = {}  # Global dict to hold active clients during FSM flow
CLIENT_TYPE_HELP_TEXT = (
    "<b>–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É Pyrogram –∏ Telethon?</b>\n\n"
    "–≠—Ç–æ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API. –û–Ω–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º.\n\n"
    "üîπ <b>Pyrogram (–°—Ç–∞–±–∏–ª—å–Ω—ã–π)</b>\n"
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á: —Å–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã, –ø–∞—Ä—Å–∏–Ω–≥, –ø—Ä–æ–≥—Ä–µ–≤. –°–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤ –º–µ–Ω—é.\n\n"
    "üî∏ <b>Telethon (–î–ª—è –∞—Ç–∞–∫)</b>\n"
    "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –º–æ–¥—É–ª—è '–ê—Ç–∞–∫–∞ –≤ –õ–°'</b>. –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –Ω–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –Ω–µ—Å—Ç–∏ <b>–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b> –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏. –°–µ—Å—Å–∏–∏ Telethon –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ <b>–Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å</b>, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ API –∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∏—Å–∫ –±–∞–Ω–∞."
)

@router.message(Command("cancel"), SessionStates.adding_phone, SessionStates.adding_code, SessionStates.adding_password, SessionStates.adding_phone_telethon, SessionStates.adding_code_telethon, SessionStates.adding_password_telethon)
async def cancel_session_add(message: Message, state: FSMContext):
    """Handles cancellation during the session adding process."""
    user_id = message.from_user.id
    client = FSM_CLIENTS.pop(user_id, None)
    if client and client.is_connected:
        await client.disconnect()

    telethon_client = FSM_TELETHON_CLIENTS.pop(user_id, None)
    if telethon_client and telethon_client.is_connected():
        await telethon_client.disconnect()

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=settings_keyboard())

def _get_client_type_from_message(message: Message) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ ('pyrogram' –∏–ª–∏ 'telethon') –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if not message or not message.text:
        return None
    if 'Pyrogram' in message.text:
        return 'pyrogram'
    if 'Telethon' in message.text:
        return 'telethon'
    return None

async def show_sessions_menu(message: Message, user_id: int, client_type: str, page: int = 1):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Å–µ—Å—Å–∏–π."""
    type_map = {'pyrogram': 'Pyrogram', 'telethon': 'Telethon'}
    display_type = type_map.get(client_type, client_type.capitalize())

    await message.edit_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é {display_type} —Å–µ—Å—Å–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ù–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π ---
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –≤—Å–µ —Å–µ—Å—Å–∏–∏ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è.
        sessions_from_db = await db_manager.get_sessions_by_type(user_id, client_type)

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –í–°–ï–• —Å–µ—Å—Å–∏–π –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
        all_validated_statuses = await validate_user_sessions(user_id)
        status_map = {s.get('phone'): s for s in all_validated_statuses}

        # 3. –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –æ–±–æ–≥–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
        session_statuses = []
        for phone, path in sessions_from_db.items():
            status_info = status_map.get(phone, {})
            session_statuses.append({
                'phone': phone,
                'status': status_info.get('status', '‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞...'),
                'is_bad': status_info.get('is_bad', True),
                'type': client_type
            })

        sorted_statuses = sorted(session_statuses, key=lambda x: x.get('is_bad', False), reverse=True)

        total_pages = (len(sorted_statuses) + config.SESSIONS_PER_PAGE - 1) // config.SESSIONS_PER_PAGE or 1
        page = max(1, min(page, total_pages))

        start_index = (page - 1) * config.SESSIONS_PER_PAGE
        end_index = start_index + config.SESSIONS_PER_PAGE
        sessions_on_page = sorted_statuses[start_index:end_index]

        text = f"<b>üì± –í–∞—à–∏ {display_type} –∞–∫–∫–∞—É–Ω—Ç—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
        if not session_statuses:
            text += "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø—É—Å—Ç."
        else:
            text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ. [P] - Pyrogram, [T] - Telethon."

        markup = sessions_keyboard_markup(sessions_on_page, page, total_pages, client_type)
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ---
        markup.inline_keyboard.append(
            [InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="back_to_session_type_selection")]
        )

        await message.edit_text(text, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in show_sessions_menu for user {user_id}: {e}", exc_info=True)
        await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())

def _get_session_type_selection_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîπ Pyrogram —Å–µ—Å—Å–∏–∏", callback_data="list_sessions_pyrogram")
    builder.button(text="üî∏ Telethon —Å–µ—Å—Å–∏–∏", callback_data="list_sessions_telethon")
    builder.button(text="–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞?", callback_data="client_type_help_from_menu")
    builder.adjust(1)
    return builder.as_markup()

@router.message(F.text == "üì± –°–µ—Å—Å–∏–∏")
async def manage_sessions_command(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=_get_session_type_selection_keyboard()
    )

@router.callback_query(F.data.startswith("list_sessions_"))
async def list_sessions_by_type_callback(query: CallbackQuery):
    client_type = query.data.split('_')[-1] # pyrogram or telethon
    await query.answer()
    await show_sessions_menu(query.message, query.from_user.id, client_type=client_type, page=1)

@router.callback_query(F.data == "back_to_session_type_selection")
async def back_to_session_type_selection_callback(query: CallbackQuery):
    await query.answer()
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=_get_session_type_selection_keyboard()
    )

@router.callback_query(F.data == "client_type_help_from_menu")
async def client_type_help_from_menu_callback(query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –æ —Ç–∏–ø–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞."""
    await query.answer()
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_session_type_selection")

    await query.message.edit_text(
        CLIENT_TYPE_HELP_TEXT,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("sessions_page_"))
async def sessions_page_callback(query: CallbackQuery):
    await query.answer()
    client_type = _get_client_type_from_message(query.message)
    if not client_type:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Å—Å–∏–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        logger.warning(f"Could not determine client_type for pagination for user {query.from_user.id}")
        return

    page = int(query.data.split('_')[-1])
    await show_sessions_menu(query.message, query.from_user.id, client_type=client_type, page=page)

@router.callback_query(F.data == "refresh_sessions")
async def refresh_sessions_callback(query: CallbackQuery):
    user_id = query.from_user.id
    client_type = _get_client_type_from_message(query.message)
    if not client_type:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
        logger.warning(f"Could not determine client_type for refresh for user {user_id}")
        return

    async with SESSION_VALIDATION_CACHE_LOCK:
        if user_id in SESSION_VALIDATION_CACHE:
            del SESSION_VALIDATION_CACHE[user_id]
            
    await query.answer("–ö—ç—à –æ—á–∏—â–µ–Ω. –û–±–Ω–æ–≤–ª—è—é...")
    current_page = 1
    if query.message and query.message.text:
        match = re.search(r'–°—Ç—Ä–∞–Ω–∏—Ü–∞ (\d+)', query.message.text)
        if match:
            current_page = int(match.group(1))
    await show_sessions_menu(query.message, query.from_user.id, client_type=client_type, page=current_page)

@router.callback_query(F.data.startswith("delete_session_"))
async def delete_session_callback(query: CallbackQuery):
    if not await check_subscription(query):
        return
    phone_to_delete = query.data.split('_')[-1]
    user_id = query.from_user.id

    client_type = _get_client_type_from_message(query.message)
    if not client_type:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.", show_alert=True)
        logger.warning(f"Could not determine client_type after deleting session for user {user_id}")
        return

    current_page = 1
    if query.message and query.message.text:
        match = re.search(r'–°—Ç—Ä–∞–Ω–∏—Ü–∞ (\d+)', query.message.text)
        if match:
            current_page = int(match.group(1))

    await query.answer(f"–£–¥–∞–ª—è—é —Å–µ—Å—Å–∏—é {phone_to_delete}...")
    await db_manager.delete_session(user_id, phone_to_delete)

    async with SESSION_VALIDATION_CACHE_LOCK:
        SESSION_VALIDATION_CACHE.pop(user_id, None)
    await show_sessions_menu(query.message, query.from_user.id, client_type=client_type, page=current_page)


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤—Ä—É—á–Ω—É—é ---

@router.callback_query(F.data == "add_account")
async def add_account_start(query: CallbackQuery, state: FSMContext):
    if not await check_subscription(query):
        return
    # Prevent starting a new flow if one is already active for this user
    if query.from_user.id in FSM_CLIENTS or query.from_user.id in FSM_TELETHON_CLIENTS:
        await query.answer("‚ùóÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.", show_alert=True)
        return

    await query.answer()
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=select_client_type_keyboard())
    await state.set_state(SessionStates.choose_client_type)

@router.callback_query(F.data == "client_type_help", SessionStates.choose_client_type)
async def client_type_help_callback(query: CallbackQuery):
    await query.answer()
    await query.message.edit_text(CLIENT_TYPE_HELP_TEXT, reply_markup=select_client_type_keyboard())

@router.callback_query(F.data == "add_session_type_pyrogram", SessionStates.choose_client_type)
async def add_session_pyrogram_selected(query: CallbackQuery, state: FSMContext):
    await state.update_data(client_type='pyrogram')
    await query.message.edit_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Pyrogram —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890).\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await state.set_state(SessionStates.adding_phone)

# --- PYROGRAM AUTHORIZATION FLOW ---

@router.message(SessionStates.adding_phone, F.text, ~F.text.startswith('/'))
async def add_session_phone_received(message: Message, state: FSMContext):
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    phone_number = message.text.replace(" ", "").strip()
    if not re.match(r"^\+\d{10,}$", phone_number):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +1234567890.\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    user_id = message.from_user.id
    session_name = phone_number.replace('+', '')
    session_dir = os.path.join('sessions', str(user_id))
    session_file_full_path = os.path.join(session_dir, f"{session_name}.session")
    os.makedirs(session_dir, exist_ok=True)

    # –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏,
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π Pyrogram –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    if os.path.isdir(session_dir):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Å–µ—Å—Å–∏–µ–π (.session, .session-journal, .session-wal –∏ —Ç.–¥.)
        session_name_base = os.path.splitext(os.path.basename(session_file_full_path))[0]
        for filename in os.listdir(session_dir):
            if filename.startswith(session_name_base):
                file_to_delete = os.path.join(session_dir, filename)
                try:
                    if os.path.isfile(file_to_delete):
                        os.remove(file_to_delete)
                        logger.info(f"Removed existing session-related file before re-adding: {file_to_delete}")
                except OSError as e:
                    logger.error(f"Could not remove existing session file {file_to_delete}: {e}")
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    await state.clear()
                    return

    try:
        api_id_as_int = int(config.API_ID)
    except (ValueError, TypeError):
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: config.API_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º!")
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await state.clear()
        return

    client = FSMClient(
        name=session_name, 
        api_id=api_id_as_int, 
        api_hash=config.API_HASH, 
        workdir=session_dir
    )
    FSM_CLIENTS[user_id] = client  # Store the client instance
    
    try:
        # Connect the client and keep it connected for the FSM flow
        await client.connect()
        sent_code = await client.send_code(phone_number)

        logger.info(f"[{user_id}] Code sent for {phone_number}. Hash: {sent_code.phone_code_hash}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –≤ FSM
        await state.update_data(
            phone=phone_number,
            session_name=session_name,
            session_dir=session_dir, # Keep for client init
            phone_code_hash=sent_code.phone_code_hash,
            session_file_full_path=session_file_full_path # Store full path for DB
        )
        
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await state.set_state(SessionStates.adding_code)

    except FloodWait as e:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.value} —Å–µ–∫.")
    except (PhoneNumberInvalid, UserDeactivated):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    except Exception as e:
        logger.error(f"Unexpected exception during send_code for {phone_number}: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –£—Å–∏–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ ---
        # –ï—Å–ª–∏ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, –∑–Ω–∞—á–∏—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
        if await state.get_state() == SessionStates.adding_phone:
            client = FSM_CLIENTS.pop(user_id, None)
            if client and client.is_connected:
                await client.disconnect()
            await state.clear()

@router.message(SessionStates.adding_code, F.text, ~F.text.startswith('/'))
async def add_session_code_received(message: Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    
    client = FSM_CLIENTS.get(user_id)
    if not client:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=settings_keyboard())
        await state.clear()
        return

    try:
        await client.sign_in(
            phone_number=data['phone'],
            phone_code_hash=data['phone_code_hash'],
            phone_code=code
        )

        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –∏ 2FA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await client.disconnect()
        FSM_CLIENTS.pop(user_id, None)
        await db_manager.add_session(user_id, data['phone'], data['session_file_full_path'], client_type='pyrogram')

        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
        async with SESSION_VALIDATION_CACHE_LOCK:
            SESSION_VALIDATION_CACHE.pop(user_id, None)

        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è {data['phone']} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=settings_keyboard())
        await state.clear()
    except SessionPasswordNeeded:
        # 2FA —Ç—Ä–µ–±—É–µ—Ç—Å—è. –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        # The client remains connected for the next step.
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (2FA):\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await state.set_state(SessionStates.adding_password)

    except (PhoneCodeInvalid, PhoneCodeExpired):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=settings_keyboard())
        await client.disconnect()
        FSM_CLIENTS.pop(user_id, None)
        await state.clear()
    except (AuthKeyUnregistered, TypeError):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –£–¥–∞–ª–∏—Ç–µ –µ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=settings_keyboard())
        await client.disconnect()
        FSM_CLIENTS.pop(user_id, None)
        await state.clear()
    except Exception as e:
        logger.error(f"Error signing in for {data['phone']}: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=settings_keyboard())
        await client.disconnect()
        FSM_CLIENTS.pop(user_id, None)
        await state.clear()


@router.message(SessionStates.adding_password, F.text, ~F.text.startswith('/'))
async def add_session_password_received(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    
    client = FSM_CLIENTS.get(user_id)
    if not client:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=settings_keyboard())
        await state.clear()
        return

    try:
        await client.check_password(password)

        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await db_manager.add_session(user_id, data['phone'], data['session_file_full_path'], client_type='pyrogram')

        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
        async with SESSION_VALIDATION_CACHE_LOCK:
            SESSION_VALIDATION_CACHE.pop(user_id, None)

        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è {data['phone']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ (—Å 2FA)!", reply_markup=settings_keyboard())

    except Exception as e: # This will now catch errors from check_password
        logger.error(f"Error with 2FA for {data['phone']}: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º: {e}", reply_markup=settings_keyboard())
    finally:
        # Always clean up at the end of the flow
        if client.is_connected:
            await client.disconnect()
        FSM_CLIENTS.pop(user_id, None)
        await state.clear()


# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ —Ñ–∞–π–ª–æ–º (—Ç–æ–ª—å–∫–æ Pyrogram) ---

@router.callback_query(F.data == "upload_session_file")
async def upload_session_start(query: CallbackQuery, state: FSMContext):
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    if not await check_subscription(query):
        return
    # Prevent starting a new flow if one is already active for this user
    if query.from_user.id in FSM_CLIENTS:
        await query.answer("‚ùóÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.", show_alert=True)
        return

    await query.answer()
    await query.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏ <b>Pyrogram</b> (.session).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(SessionStates.uploading_session)


@router.message(SessionStates.uploading_session, F.document)
async def handle_session_file_upload(message: Message, bot: Bot):
    document = message.document
    if not document.file_name.endswith('.session'):
        await message.reply("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ .session.")
        return

    user_id = message.from_user.id
    session_dir = os.path.abspath(f"sessions/{user_id}")
    os.makedirs(session_dir, exist_ok=True)
    
    clean_session_name = document.file_name.replace('+', '')
    session_file_path = os.path.join(session_dir, clean_session_name)
    pyrogram_session_name = os.path.splitext(clean_session_name)[0]

    temp_client = None # Initialize temp_client outside try block
    success = False # Flag to track if session was successfully processed
    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download(file=document.file_id, destination=session_file_path)
        
        # 2. –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
        temp_client = Client(
            name=pyrogram_session_name, api_id=int(config.API_ID), api_hash=config.API_HASH,
            workdir=session_dir, no_updates=True
        )
        await temp_client.connect()
        me = await temp_client.get_me()
        phone_number = me.phone_number if me else None
        if not phone_number:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")
        
        # 3. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
        await db_manager.add_session(user_id, phone_number, session_file_path, client_type='pyrogram')

        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
        async with SESSION_VALIDATION_CACHE_LOCK:
            SESSION_VALIDATION_CACHE.pop(user_id, None)

        await message.reply(
            f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ <code>{html.escape(document.file_name)}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ <code>{html.escape(phone_number)}</code>."
        )
        success = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ {document.file_name}: {e}", exc_info=True)
        
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {html.escape(str(e))}"
        e_str = str(e).lower()
        if "no such column" in e_str or "malformed" in e_str:
            error_text += "\n<i>–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π Pyrogram.</i>"
        elif "database is locked" in e_str:
            error_text += "\n<i>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</i>"
        elif isinstance(e, (AuthKeyUnregistered, UserDeactivated)):
            error_text += "\n<i>–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.</i>"
        
        await message.reply(f"{error_text}. –§–∞–π–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    finally:
        if temp_client and temp_client.is_connected:
            await temp_client.disconnect()
        
        if not success and os.path.exists(session_file_path):
            try:
                os.remove(session_file_path)
            except OSError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file_path}: {e}")


@router.message(SessionStates.uploading_session, F.text == '/done')
async def finish_session_upload(message: Message, state: FSMContext):
    await message.answer("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=settings_keyboard())
    await state.clear()


# --- TELETHON AUTHORIZATION FLOW ---

@router.callback_query(F.data == "add_session_type_telethon", SessionStates.choose_client_type)
async def add_session_telethon_selected(query: CallbackQuery, state: FSMContext):
    await state.update_data(client_type='telethon')
    await query.message.edit_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Telethon —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890).\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await state.set_state(SessionStates.adding_phone_telethon)

@router.message(SessionStates.adding_phone_telethon, F.text, ~F.text.startswith('/'))
async def add_session_phone_telethon_received(message: Message, state: FSMContext):
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    phone_number = message.text.replace(" ", "").strip()
    if not re.match(r"^\+\d{10,}$", phone_number):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +1234567890.\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    user_id = message.from_user.id
    session_name = phone_number.replace('+', '')
    session_dir = os.path.join('sessions', str(user_id))
    session_file_full_path = os.path.join(session_dir, f"{session_name}.session")
    os.makedirs(session_dir, exist_ok=True)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(session_file_full_path):
        os.remove(session_file_full_path)

    client = TelegramClient(StringSession(), int(config.API_ID), config.API_HASH)
    FSM_TELETHON_CLIENTS[user_id] = client

    try:
        await client.connect()
        sent_code = await client.send_code_request(phone_number)
        await state.update_data(
            phone=phone_number,
            phone_code_hash=sent_code.phone_code_hash,
            session_file_full_path=session_file_full_path
        )
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await state.set_state(SessionStates.adding_code_telethon)
    except FloodWaitError as e:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.seconds} —Å–µ–∫.")
        if client.is_connected(): await client.disconnect()
        FSM_TELETHON_CLIENTS.pop(user_id, None)
        await state.clear()
    except (PhoneNumberBannedError, UserDeactivatedError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        if client.is_connected(): await client.disconnect()
        FSM_TELETHON_CLIENTS.pop(user_id, None)
        await state.clear()
    except Exception as e:
        logger.error(f"Unexpected exception during Telethon send_code for {phone_number}: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if client.is_connected(): await client.disconnect()
        FSM_TELETHON_CLIENTS.pop(user_id, None)
        await state.clear()

@router.message(SessionStates.adding_code_telethon, F.text, ~F.text.startswith('/'))
async def add_session_code_telethon_received(message: Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    client = FSM_TELETHON_CLIENTS.get(user_id)

    if not client:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=settings_keyboard())
        await state.clear()
        return

    try:
        await client.sign_in(phone=data['phone'], code=code, phone_code_hash=data['phone_code_hash'])
        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –∏ 2FA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        session_string = client.session.save()
        with open(data['session_file_full_path'], "w") as f:
            f.write(session_string)
        await db_manager.add_session(user_id, data['phone'], data['session_file_full_path'], client_type='telethon')
        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è Telethon {data['phone']} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=settings_keyboard())
    except SessionPasswordNeededError:
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (2FA):\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await state.set_state(SessionStates.adding_password_telethon)
        return # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ finally, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    except (PhoneCodeInvalidError, AuthKeyUnregisteredError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=settings_keyboard())
    except Exception as e:
        logger.error(f"Error signing in with Telethon for {data['phone']}: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=settings_keyboard())
    finally:
        current_state = await state.get_state()
        if current_state != SessionStates.adding_password_telethon:
            if client.is_connected(): await client.disconnect()
            FSM_TELETHON_CLIENTS.pop(user_id, None)
            await state.clear()

@router.message(SessionStates.adding_password_telethon, F.text, ~F.text.startswith('/'))
async def add_session_password_telethon_received(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    client = FSM_TELETHON_CLIENTS.get(user_id)

    try:
        await client.sign_in(password=password)
        session_string = client.session.save()
        with open(data['session_file_full_path'], "w") as f:
            f.write(session_string)
        await db_manager.add_session(user_id, data['phone'], data['session_file_full_path'], client_type='telethon')
        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è Telethon {data['phone']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ (—Å 2FA)!", reply_markup=settings_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º: {e}", reply_markup=settings_keyboard())
    finally:
        if client and client.is_connected(): await client.disconnect()
        FSM_TELETHON_CLIENTS.pop(user_id, None)
        await state.clear()