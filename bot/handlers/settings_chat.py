# bot/handlers/settings_chat.py
import html
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import config
from bot.client_tasks.search import search_chats_task
from bot.database.db_manager import db_manager
from bot.middlewares import check_subscription
from bot.states import ChatStates, SearchStates
from bot.utils.safe_task import create_safe_task
from ..keyboards import chats_keyboard_markup, settings_keyboard

router = Router()

async def show_chats_page(message: Message, user_id: int, page: int = 1):
    total_chats = await db_manager.get_chats_count(user_id)
    total_pages = (total_chats + config.CHATS_PER_PAGE - 1) // config.CHATS_PER_PAGE or 1
    page = max(1, min(page, total_pages))

    chats_on_page = await db_manager.get_paginated_chats(user_id, page, config.CHATS_PER_PAGE)

    text = f"<b>üì¢ –í–∞—à–∏ –≥—Ä—É–ø–ø—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n"
    if not total_chats:
        text = "<b>üì¢ –í–∞—à–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    else:
        # No need to list them all if the keyboard shows them
        pass

    markup = chats_keyboard_markup(chats_on_page, page, total_pages)
    await message.edit_text(text, reply_markup=markup)


@router.message(F.text == "üì¢ –ì—Ä—É–ø–ø—ã")
async def manage_chats_command(message: Message):
    # Send a temporary message that we can then edit
    sent_message = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...")
    await show_chats_page(sent_message, message.from_user.id, page=1)


@router.callback_query(F.data.startswith("chats_page_"))
async def chats_page_callback(query: CallbackQuery):
    await query.answer()
    page = int(query.data.split('_')[-1])
    await show_chats_page(query.message, query.from_user.id, page=page)


@router.callback_query(F.data == "add_chats_list")
async def add_chats_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await query.answer()
    await query.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º—ã (@group), –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (t.me/group) –∏–ª–∏ joinchat-—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø, "
        "—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n–ü—Ä–∏–º–µ—Ä: @mygroup, t.me/anothergroup, t.me/joinchat/XXXXXX\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(ChatStates.add_list)


@router.message(ChatStates.add_list)
async def add_chats_received(message: Message, state: FSMContext):
    raw_chats = re.split(r'[,\n]', message.text)
    
    chats_to_add = []
    for chat_input in raw_chats:
        clean_input = chat_input.strip()
        if not clean_input:
            continue

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (https://t.me/username) –≤ —Ñ–æ—Ä–º–∞—Ç @username
        # Pyrogram —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç @username –∏ t.me/joinchat/XXXX, –Ω–æ –ø–æ–ª–Ω—ã–µ URL –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å UsernameInvalid.
        if clean_input.startswith(('http://t.me/', 'https://t.me/')):
            path_part = clean_input.split('t.me/')[1]
            if not path_part.startswith(('joinchat', '+')):
                # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª
                chats_to_add.append('@' + path_part.split('/')[0])
                continue
        
        chats_to_add.append(clean_input)

    if not chats_to_add:
        await message.reply("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –≤–≤–µ–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
        return

    user_id = message.from_user.id
    await db_manager.add_chats(user_id, chats_to_add)
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    sent_message = await message.answer(f"‚úÖ –ì—Ä—É–ø–ø—ã ({len(chats_to_add)}) –¥–æ–±–∞–≤–ª–µ–Ω—ã! –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫...")
    await show_chats_page(sent_message, user_id, page=1)
@router.callback_query(F.data.startswith("delete_chat_"))
async def delete_chat_callback(query: CallbackQuery):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    chat_to_delete = query.data.replace("delete_chat_", "", 1)

    current_page = 1
    if query.message and query.message.text:
        match = re.search(r'–°—Ç—Ä–∞–Ω–∏—Ü–∞ (\d+)', query.message.text)
        if match:
            current_page = int(match.group(1))

    await query.answer(f"–£–¥–∞–ª—è—é —á–∞—Ç...")
    await db_manager.delete_chat(query.from_user.id, chat_to_delete)
    await show_chats_page(query.message, query.from_user.id, page=current_page)


# --- –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø ---
@router.callback_query(F.data == "find_chats")
async def find_chats_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await query.answer()
    await query.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ì–†–£–ü–ü (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(SearchStates.enter_keywords)

@router.message(SearchStates.enter_keywords)
async def process_keywords_for_search_chats(message: Message, state: FSMContext):
    keywords = [k.strip() for k in message.text.split(',') if k.strip()]
    if not keywords:
        await message.reply("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
        return

    user_id = message.from_user.id
    await message.reply("üîé –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ì–†–£–ü–ü... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
                        reply_markup=settings_keyboard())
    await state.clear()
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
    create_safe_task(search_chats_task(
        bot=message.bot,
        user_id=message.from_user.id,
        keywords=keywords
    ), user_id=message.from_user.id, bot=message.bot, task_name="–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø")