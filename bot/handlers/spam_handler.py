# bot/handlers/spam_handler.py
import asyncio
import logging
import os

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import config
from bot.client_tasks.client_manager import (
    ACTIVE_SPAM_TASKS, ATTACK_STATUS, SPAM_STATUS, SPAM_STATUS_LOCK,
    STOP_EVENTS
)
from bot.client_tasks.spam_loop import spam_loop_task
from bot.database.db_manager import db_manager
from bot.keyboards import select_sessions_keyboard, tasks_keyboard, spam_settings_keyboard
from bot.middlewares import check_subscription
from bot.states import SpamStates

router = Router()
logger = logging.getLogger(__name__)

async def _actually_start_spam_task(message: Message, bot: Bot, user_id: int, session_limit: int | None, state: FSMContext):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ —Å–ø–∞–º–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ---
    await state.clear()
    async with SPAM_STATUS_LOCK:
        if SPAM_STATUS.get(user_id):
            await message.answer("‚ö†Ô∏è –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏).")
            return

        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑-–ø–æ–¥ –ª–æ–∫–∞
        SPAM_STATUS[user_id] = True

    is_attack_active = ATTACK_STATUS.get(user_id, False)
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å" ---
    await message.answer(
        "üöÄ <b>–°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìä –°—Ç–∞—Ç—É—Å'.",
        reply_markup=tasks_keyboard(is_spam_active=True, is_attack_active=is_attack_active)
    )
    stop_event = asyncio.Event()
    STOP_EVENTS[user_id] = stop_event

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á—É ---
    task = asyncio.create_task(spam_loop_task(
        user_id=user_id,
        bot=bot,
        session_limit=session_limit
    ))
    ACTIVE_SPAM_TASKS[user_id] = task

@router.message(F.text == "‚ñ∂Ô∏è –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã")
async def start_spam_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
    if not await check_subscription(message):
        return

    if SPAM_STATUS.get(user_id):
        is_attack_active = ATTACK_STATUS.get(user_id, False)
        await message.answer(
            "–°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
            reply_markup=tasks_keyboard(is_spam_active=True, is_attack_active=is_attack_active)
        )
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Å–ø–∞–º–∞ ---
    all_user_sessions_data = await db_manager.get_user_data(user_id)
    all_sessions = all_user_sessions_data['sessions']
    chats_count = await db_manager.get_chats_count(user_id)
    comments = await db_manager.get_comments(user_id)

    errors = []
    if not all_sessions:
        errors.append("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ø–∞–º–∞.")
    if chats_count == 0:
        errors.append("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Å–ø–∞–º–∞. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if not comments:
        errors.append("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Å–ø–∞–º–∞. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    if errors:
        await message.reply("\n".join(errors))
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–¥—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –∞ –Ω–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π ---
    # Local import to break circular dependency
    from bot.client_tasks.client_manager import (
        RESERVED_SESSIONS, RESERVED_SESSIONS_LOCK
    )
    async with RESERVED_SESSIONS_LOCK:
        reserved_for_user = RESERVED_SESSIONS.get(user_id, {})

    all_session_names = {os.path.splitext(os.path.basename(p))[0] for p in all_sessions.values()}
    available_session_names = all_session_names - set(reserved_for_user.keys())
    available_sessions_count = len(available_session_names)

    if available_sessions_count == 0:
        await message.reply("‚ùå –í—Å–µ —Å–µ—Å—Å–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö.")
        return

    await state.set_state(SpamStates.select_sessions)
    await message.answer(
        f"–°–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ø–∞–º–∞? (–î–æ—Å—Ç—É–ø–Ω–æ: {available_sessions_count})",
        reply_markup=select_sessions_keyboard(available_sessions_count, 'spam')
    )

@router.callback_query(F.data.startswith("spam_sessions_"), SpamStates.select_sessions)
async def spam_sessions_selected(query: CallbackQuery, state: FSMContext, bot: Bot):
    action = query.data.split('_')[-1]
    await query.answer()

    if action == 'custom':
        await state.set_state(SpamStates.set_session_count)
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π:")
        return
    session_limit = None if action == 'all' else int(action)
    await query.message.delete()
    await _actually_start_spam_task(query.message, bot, query.from_user.id, session_limit, state)

@router.message(SpamStates.set_session_count)
async def spam_sessions_custom_count(message: Message, state: FSMContext, bot: Bot):
    try:
        session_limit = int(message.text)
        user_id = message.from_user.id

        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–µ—Å—Å–∏—è–º ---
        # Local import to break circular dependency
        from bot.client_tasks.client_manager import (
            RESERVED_SESSIONS, RESERVED_SESSIONS_LOCK
        )
        all_user_sessions_data = await db_manager.get_user_data(user_id)
        all_sessions = all_user_sessions_data['sessions']
        async with RESERVED_SESSIONS_LOCK:
            reserved_for_user = RESERVED_SESSIONS.get(user_id, {})

        all_session_names = {os.path.splitext(os.path.basename(p))[0] for p in all_sessions.values()}
        available_session_names = all_session_names - set(reserved_for_user.keys())
        available_sessions_count = len(available_session_names)

        if not (0 < session_limit <= available_sessions_count):
            await message.reply(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {available_sessions_count}.")
            return
        await _actually_start_spam_task(message, bot, user_id, session_limit, state)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º")
async def stop_spam_command(message: Message):
    user_id = message.from_user.id
    is_attack_active = ATTACK_STATUS.get(user_id, False)

    if not SPAM_STATUS.get(user_id, False):
        await message.answer(
            "–°–ø–∞–º –Ω–µ –∑–∞–ø—É—â–µ–Ω.",
            reply_markup=tasks_keyboard(is_spam_active=False, is_attack_active=is_attack_active)
        )
        return

    stop_event = STOP_EVENTS.get(user_id)
    if stop_event:
        stop_event.set()
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç—á–µ—Ç
        await message.answer("üõë –ü–æ—Å—ã–ª–∞—é —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∞–º–∞... –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
    else:
        # –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—Å—Ç—å, –∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç
        async with SPAM_STATUS_LOCK:
            SPAM_STATUS[user_id] = False
        await message.answer(
            "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∞–º–∞. –°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω.",
            reply_markup=tasks_keyboard(is_spam_active=False, is_attack_active=is_attack_active)
        )

# --- –ù–ê–°–¢–†–û–ô–ö–ò –°–ü–ê–ú–ê ---

@router.message(Command("cancel"), SpamStates.settings_menu, SpamStates.set_delay)
async def cancel_spam_settings(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∞–º–∞."""
    data = await state.get_data()
    menu_id = data.get("spam_settings_menu_id")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if menu_id:
        try:
            await message.bot.delete_message(message.chat.id, menu_id)
        except Exception:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á")
async def task_settings_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∑–∞–¥–∞—á —Å–ø–∞–º–∞."""
    user_id = message.from_user.id
    settings = await db_manager.get_ai_settings(user_id)
    settings['delay'] = await db_manager.get_delay(user_id)

    await state.set_state(SpamStates.settings_menu)
    sent_message = await message.answer(
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–º–∞</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=spam_settings_keyboard(settings)
    )
    await state.update_data(spam_settings_menu_id=sent_message.message_id)

async def _update_spam_settings_view(bot: Bot, chat_id: int, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–∞–º–∞."""
    data = await state.get_data()
    menu_id = data.get("spam_settings_menu_id")
    if not menu_id: return

    try:
        settings = await db_manager.get_ai_settings(chat_id)
        settings['delay'] = await db_manager.get_delay(chat_id)
        markup = spam_settings_keyboard(settings)
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=menu_id, reply_markup=markup)
    except Exception as e:
        logger.warning(f"Could not update spam settings menu for user {chat_id}: {e}")

@router.callback_query(F.data == "back_to_tasks_menu", SpamStates.settings_menu)
async def back_to_tasks_menu_callback(query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∑–∞–¥–∞—á, —É–¥–∞–ª—è—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await query.message.delete()
    await state.clear()
    await query.answer()

@router.callback_query(F.data == "spam_set_delay", SpamStates.settings_menu)
async def set_delay_start_callback(query: CallbackQuery, state: FSMContext):
    if not await check_subscription(query): return
    await query.answer()
    current_delay = await db_manager.get_delay(query.from_user.id)
    await query.message.edit_text(
        f"‚è± –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {current_delay} —Å–µ–∫.\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é (–º–∏–Ω–∏–º—É–º {config.MIN_DELAY_BETWEEN_COMMENTS}).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(SpamStates.set_delay)

@router.message(SpamStates.set_delay)
async def set_delay_received(message: Message, state: FSMContext):
    try:
        delay = int(message.text)
        if delay < config.MIN_DELAY_BETWEEN_COMMENTS:
            await message.reply(f"‚ùå –ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ - {config.MIN_DELAY_BETWEEN_COMMENTS} —Å–µ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
            return
        user_id = message.from_user.id
        await db_manager.update_delay(user_id, delay)
        await message.delete()
        await state.set_state(SpamStates.settings_menu)
        await _update_spam_settings_view(message.bot, user_id, state)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")

@router.callback_query(F.data.in_({"spam_toggle_persistent", "spam_toggle_auto_leave"}), SpamStates.settings_menu)
async def toggle_spam_settings_callback(query: CallbackQuery, state: FSMContext):
    if not await check_subscription(query): return
    user_id = query.from_user.id
    await query.answer()
    current_settings = await db_manager.get_ai_settings(user_id)
    if query.data == "spam_toggle_persistent":
        new_status = not current_settings.get("persistent_spam", False)
        await db_manager.set_persistent_spam_enabled(user_id, new_status)
    elif query.data == "spam_toggle_auto_leave":
        new_status = not current_settings.get("auto_leave_enabled", False)
        await db_manager.set_auto_leave_enabled(user_id, new_status)
    await _update_spam_settings_view(query.bot, user_id, state)