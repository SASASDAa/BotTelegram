# bot/handlers/settings_ai.py
import html

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.database.db_manager import db_manager
from bot.middlewares import check_subscription
from bot.states import AiStates
from ..keyboards import ai_settings_keyboard, settings_keyboard

router = Router()

async def get_ai_menu_text(user_id: int, status_line: str = "") -> str:
    ai_conf = await db_manager.get_ai_settings(user_id)
    api_key_status = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if ai_conf["api_key"] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    prompt_to_show = ai_conf.get("prompt")
    prompt_status = f"<code>{html.escape(prompt_to_show[:30])}...</code>" if prompt_to_show else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    enabled_status = "–í–∫–ª—é—á–µ–Ω–∞" if ai_conf["enabled"] else "–í—ã–∫–ª—é—á–µ–Ω–∞"
    text = (
        f"<b>ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –°–æ–æ–±—â–µ–Ω–∏–π (Gemini):</b>\n\n"
        f"{status_line}\n"
        f"‚ñ´Ô∏è API –ö–ª—é—á: {api_key_status}\n"
        f"‚ñ´Ô∏è –ü—Ä–æ–º–ø—Ç: {prompt_status}\n"
        f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {enabled_status}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    return text

@router.message(F.text == "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò")
async def ai_settings_menu_command(message: Message):
    user_id = message.from_user.id
    text = await get_ai_menu_text(user_id)
    markup = await ai_settings_keyboard(user_id)
    await message.answer(text, reply_markup=markup)

@router.callback_query(F.data == "set_gemini_key")
async def set_gemini_key_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await query.answer()
    await query.message.edit_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –¥–ª—è Google Gemini (AI Studio).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\nApi –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–¥–µ—Å—å: https://aistudio.google.com/apikey"
    )
    await state.update_data(ai_menu_message_id=query.message.message_id)
    await state.set_state(AiStates.set_key)

@router.message(AiStates.set_key)
async def set_gemini_key_received(message: Message, state: FSMContext):
    api_key = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    menu_message_id = data.get("ai_menu_message_id")
    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
    await state.clear()

    if not api_key or len(api_key) < 20:
        status_line = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞."
    else:
        await db_manager.set_gemini_api_key(user_id, api_key)
        status_line = "‚úÖ API –∫–ª—é—á Gemini —Å–æ—Ö—Ä–∞–Ω–µ–Ω."

    text = await get_ai_menu_text(user_id, status_line=status_line)
    markup = await ai_settings_keyboard(user_id)
    if menu_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=user_id, message_id=menu_message_id, text=text, reply_markup=markup
            )
        except Exception:
            await message.answer(text, reply_markup=markup)
    else:
        await message.answer(text, reply_markup=markup)


@router.callback_query(F.data == "set_gemini_prompt")
async def set_gemini_prompt_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await query.answer()
    current_prompt = (await db_manager.get_ai_settings(query.from_user.id))["prompt"]
    await query.message.edit_text(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. \n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: <code>{html.escape(current_prompt)}</code>\n"
        "–ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ò–ò. "
        "–í –∫–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.update_data(ai_menu_message_id=query.message.message_id)
    await state.set_state(AiStates.set_prompt)

@router.message(AiStates.set_prompt)
async def set_gemini_prompt_received(message: Message, state: FSMContext):
    prompt = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    menu_message_id = data.get("ai_menu_message_id")
    await message.delete()
    await state.clear()

    if not prompt:
        status_line = "‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    else:
        await db_manager.set_uniqueness_prompt(user_id, prompt)
        status_line = "‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini —Å–æ—Ö—Ä–∞–Ω–µ–Ω."

    text = await get_ai_menu_text(user_id, status_line=status_line)
    markup = await ai_settings_keyboard(user_id)
    if menu_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=user_id, message_id=menu_message_id, text=text, reply_markup=markup
            )
        except Exception:
            await message.answer(text, reply_markup=markup)
    else:
        await message.answer(text, reply_markup=markup)


@router.callback_query(F.data == "toggle_uniqueness")
async def toggle_uniqueness_callback(query: CallbackQuery):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await query.answer()
    ai_settings = await db_manager.get_ai_settings(user_id)
    new_status = not ai_settings["enabled"]
    await db_manager.set_uniqueness_enabled(user_id, new_status)

    text = await get_ai_menu_text(user_id)
    markup = await ai_settings_keyboard(user_id)
    await query.message.edit_text(text, reply_markup=markup)