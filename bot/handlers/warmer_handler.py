# bot/handlers/warmer_handler.py
import asyncio
import html
import logging
import re

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.client_tasks.client_manager import (
    ACTIVE_WARMER_TASKS, WARMER_STATUS, WARMER_STATUS_LOCK,
    WARMER_STOP_EVENTS
)
from bot.client_tasks.warmer_loop import warmer_loop_task
from bot.database.db_manager import db_manager
from bot.keyboards import (
    warmer_menu_keyboard, warmer_settings_main_keyboard, warmer_settings_limits_keyboard,
    warmer_settings_content_keyboard, warmer_settings_behavior_keyboard
)
from bot.middlewares import check_subscription
from bot.states import WarmerStates

router = Router()
logger = logging.getLogger(__name__)

TUTORIAL_TEXT = (
    "üìñ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ \"–ø—Ä–æ–≥—Ä–µ–≤\" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω?</b>\n\n"
    "\"–ü—Ä–æ–≥—Ä–µ–≤\" ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è "
    "–∫ –≤–∞—à–∏–º Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞–º (—Å–µ—Å—Å–∏—è–º).\n\n"
    "<b>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?</b>\n"
    "Telegram –∞–∫—Ç–∏–≤–Ω–æ –±–æ—Ä–µ—Ç—Å—è —Å–æ —Å–ø–∞–º–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π. –ù–æ–≤—ã–µ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, "
    "–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç –º–∞—Å—Å–æ–≤–æ –≤—Å—Ç—É–ø–∞—Ç—å –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, "
    "–±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–±–∞–Ω).\n\n"
    "<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ–≤?</b>\n"
    "–ë–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –±—É–¥–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –≤–∞—à–∏—Ö —Å–µ—Å—Å–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å \"—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ\" –¥–µ–π—Å—Ç–≤–∏—è:\n"
    "  ‚Ä¢ –í—Å—Ç—É–ø–∞—Ç—å –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
    "  ‚Ä¢ –°—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã.\n\n"
    "–ë–æ—Ç —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å <b>–ø–µ—Ä–µ–ø–∏—Å–∫—É –º–µ–∂–¥—É –≤–∞—à–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</b> –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ "
    "<b>\"—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É\" —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –¥–Ω–µ–º), —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å "
    "–¥–æ–≤–µ—Ä–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Telegram.\n\n"
    "–≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ <b>–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b> "
    "–∏ –ø–æ–≤—ã—à–∞–µ—Ç \"–∂–∏–≤—É—á–µ—Å—Ç—å\" –≤–∞—à–∏—Ö —Å–µ—Å—Å–∏–π.\n\n"
    "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>\n"
    "1. –ó–∞–π–¥–∏—Ç–µ –≤ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞\" –∏ –∑–∞–¥–∞–π—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
    "2. –ù–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤\".\n"
    "3. –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
)

@router.message(F.text == "üî• –ü—Ä–æ–≥—Ä–µ–≤")
async def warmer_main_menu(message: Message):
    is_active = WARMER_STATUS.get(message.from_user.id, False)
    await message.answer(
        "–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –∫ –≤–∞—à–∏–º —Å–µ—Å—Å–∏—è–º, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –±–∞–Ω–∞.",
        reply_markup=warmer_menu_keyboard(is_active)
    )

@router.message(F.text == "üìñ –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–µ–≤?")
async def warmer_tutorial(message: Message):
    await message.answer(TUTORIAL_TEXT, reply_markup=warmer_menu_keyboard(WARMER_STATUS.get(message.from_user.id, False)))

@router.message(F.text.in_({"üî• –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤"}))
async def start_stop_warmer(message: Message):
    user_id = message.from_user.id

    if message.text == "üî• –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤":
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
        if not await check_subscription(message):
            return
        async with WARMER_STATUS_LOCK:
            if WARMER_STATUS.get(user_id, False):
                await message.reply("‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                return

            WARMER_STATUS[user_id] = True

        WARMER_STOP_EVENTS[user_id] = asyncio.Event()
        task = asyncio.create_task(warmer_loop_task(message.bot, user_id))
        ACTIVE_WARMER_TASKS[user_id] = task
        await message.reply(
            "‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –û–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
            reply_markup=warmer_menu_keyboard(is_active=True)
        )
    else: # Stop
        if not WARMER_STATUS.get(user_id):
            await message.reply("‚ùå –ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")
            return

        event = WARMER_STOP_EVENTS.get(user_id)
        if event:
            event.set()
            await message.reply(
                "üõë –ü–æ—Å—ã–ª–∞—é —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞... –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
                reply_markup=warmer_menu_keyboard(is_active=False)
            )
        else:
            async with WARMER_STATUS_LOCK:
                WARMER_STATUS[user_id] = False
            await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≥—Ä–µ–≤–∞. –°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω.", reply_markup=warmer_menu_keyboard(is_active=False))

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞")
async def warmer_settings_menu(message: Message, state: FSMContext):
    settings = await db_manager.get_warmer_settings(message.from_user.id)
    sent_message = await message.answer(
        "–¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞:",
        reply_markup=warmer_settings_main_keyboard(settings)
    )
    await state.set_state(WarmerStates.menu_main)
    await state.update_data(menu_message_id=sent_message.message_id)

async def _update_settings_menu_view(bot: Bot, chat_id: int, state: FSMContext, menu_to_show: str = None):
    """Helper to edit the menu message with fresh data, handling potential errors."""
    data = await state.get_data()
    menu_id = data.get("menu_message_id")
    if not menu_id: return

    try:
        # –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM
        if not menu_to_show:
            current_state = await state.get_state()
            state_map = {
                WarmerStates.menu_limits: 'limits',
                WarmerStates.menu_content: 'content',
                WarmerStates.menu_behavior: 'behavior',
            }
            menu_to_show = state_map.get(current_state, 'main')

        settings = await db_manager.get_warmer_settings(chat_id)
        text = "–¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞:"
        
        keyboard_map = {
            'main': warmer_settings_main_keyboard(settings),
            'limits': warmer_settings_limits_keyboard(settings),
            'content': warmer_settings_content_keyboard(settings),
            'behavior': warmer_settings_behavior_keyboard(settings),
        }
        markup = keyboard_map.get(menu_to_show)

        await bot.edit_message_text(text=text, chat_id=chat_id, message_id=menu_id, reply_markup=markup)
    except Exception as e:
        logger.warning(f"Could not update warmer settings menu (msg: {menu_id}) for user {chat_id}: {e}")

# --- –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ---

@router.callback_query(F.data.startswith("warmer_show_"), WarmerStates.menu_main)
async def warmer_show_submenu(query: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –æ–¥–Ω–æ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    await query.answer()
    submenu_type = query.data.split('_')[-1] # limits, content, behavior
    
    state_map = {
        'limits': WarmerStates.menu_limits,
        'content': WarmerStates.menu_content,
        'behavior': WarmerStates.menu_behavior,
    }
    new_state = state_map.get(submenu_type)
    
    if new_state:
        await state.set_state(new_state)
        await _update_settings_menu_view(query.bot, query.from_user.id, state, menu_to_show=submenu_type)

@router.callback_query(F.data == "warmer_back_to_main") # –†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def warmer_back_to_main_menu(query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await query.answer()
    await state.set_state(WarmerStates.menu_main)
    await _update_settings_menu_view(query.bot, query.from_user.id, state, menu_to_show='main')

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô ---

@router.callback_query(F.data == "warmer_toggle_inform", WarmerStates.menu_behavior)
async def toggle_inform_callback(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await query.answer()
    current_settings = await db_manager.get_warmer_settings(user_id)
    new_status = not current_settings.get("inform_user_on_action", False)
    await db_manager.update_warmer_settings(user_id, {"inform_user_on_action": new_status})
    await _update_settings_menu_view(query.bot, user_id, state, menu_to_show='behavior')

@router.callback_query(F.data == "warmer_toggle_dialogue", WarmerStates.menu_behavior)
async def toggle_dialogue_callback(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await query.answer()
    current_settings = await db_manager.get_warmer_settings(user_id)
    new_status = not current_settings.get("dialogue_simulation_enabled", False)
    await db_manager.update_warmer_settings(user_id, {"dialogue_simulation_enabled": new_status})
    await _update_settings_menu_view(query.bot, user_id, state, menu_to_show='behavior')

@router.callback_query(F.data == "warmer_toggle_schedule", WarmerStates.menu_behavior)
async def toggle_schedule_callback(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await query.answer()
    current_settings = await db_manager.get_warmer_settings(user_id)
    new_status = not current_settings.get("active_hours_enabled", False)
    await db_manager.update_warmer_settings(user_id, {"active_hours_enabled": new_status})
    await _update_settings_menu_view(query.bot, user_id, state, menu_to_show='behavior')

@router.callback_query(F.data.startswith("warmer_set_")) # –†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def warmer_settings_fsm_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    action = query.data.split('_')[-1]
    prompts = {
        "duration": ("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7).", WarmerStates.set_duration),
        "joins": ("üì• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∫–æ–ª-–≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã –≤ –¥–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2).", WarmerStates.set_joins),
        "reactions": ("üëç –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Ä–µ–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5).", WarmerStates.set_reactions),
        "dialogues": ("üí¨ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –≤ –¥–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3).", WarmerStates.set_dialogues),
        "channels": ("üéØ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—Å—ã–ª–∫–∏/—é–∑–µ—Ä–Ω–µ–π–º—ã –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @durov, https://t.me/telegram).", WarmerStates.set_target_channels),
        "phrases": ("üìù –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤–µ—Ç,–ö–∞–∫ –¥–µ–ª–∞?,–í—Å–µ –æ–∫).", WarmerStates.set_dialogue_phrases),
        "schedule": ("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (–ø–æ –ú–°–ö) –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ê–°_–°–¢–ê–†–¢–ê-–ß–ê–°_–ö–û–ù–¶–ê</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>9-22</b>).", WarmerStates.set_active_hours),
    }
    prompt_text, next_state = prompts.get(action, (None, None))
    if not prompt_text:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    await state.update_data(return_state=await state.get_state())
    await state.set_state(next_state)
    await query.message.edit_text(prompt_text + "\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await query.answer()

@router.message(WarmerStates.set_duration, F.text)
async def process_warmer_duration(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if not 1 <= days <= 30:
            raise ValueError
        user_id = message.from_user.id
        await db_manager.update_warmer_settings(user_id, {"duration_days": days})
        await message.delete()
        data = await state.get_data()
        return_state = data.get('return_state', WarmerStates.menu_main)
        await state.set_state(return_state)
        await _update_settings_menu_view(message.bot, user_id, state)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")

@router.message(WarmerStates.set_joins, F.text)
async def process_warmer_joins(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if not 0 <= count <= 10: raise ValueError
        user_id = message.from_user.id
        await db_manager.update_warmer_settings(user_id, {"join_channels_per_day": count})
        await message.delete()
        data = await state.get_data()
        return_state = data.get('return_state', WarmerStates.menu_main)
        await state.set_state(return_state)
        await _update_settings_menu_view(message.bot, user_id, state)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")

@router.message(WarmerStates.set_reactions, F.text)
async def process_warmer_reactions(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if not 0 <= count <= 20: raise ValueError
        user_id = message.from_user.id
        await db_manager.update_warmer_settings(user_id, {"send_reactions_per_day": count})
        await message.delete()
        data = await state.get_data()
        return_state = data.get('return_state', WarmerStates.menu_main)
        await state.set_state(return_state)
        await _update_settings_menu_view(message.bot, user_id, state)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 20.")

@router.message(WarmerStates.set_dialogues, F.text)
async def process_warmer_dialogues(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if not 0 <= count <= 20: raise ValueError
        user_id = message.from_user.id
        await db_manager.update_warmer_settings(user_id, {"dialogues_per_day": count})
        await message.delete()
        data = await state.get_data()
        return_state = data.get('return_state', WarmerStates.menu_main)
        await state.set_state(return_state)
        await _update_settings_menu_view(message.bot, user_id, state)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 20.")

@router.message(WarmerStates.set_target_channels, F.text)
async def process_warmer_target_channels(message: Message, state: FSMContext):
    raw_channels_input = message.text.strip()
    if not raw_channels_input:
        await message.reply("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î ---
    # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –±–æ—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è —Å–ø–∞–º–∞).
    # –î–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤–æ—Ä–∫–µ—Ä–µ, –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    raw_channels_list = re.split(r'[,\n]', raw_channels_input)
    normalized_channels = []
    for channel_input in raw_channels_list:
        clean_input = channel_input.strip()
        if not clean_input:
            continue

        if clean_input.startswith(('http://t.me/', 'https://t.me/')):
            path_part = clean_input.split('t.me/')[1]
            if not path_part.startswith(('joinchat', '+')):
                # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ @username
                normalized_channels.append('@' + path_part.split('/')[0])
                continue

        normalized_channels.append(clean_input)

    user_id = message.from_user.id
    final_channels_text = ", ".join(normalized_channels)
    await db_manager.update_warmer_settings(user_id, {"target_channels": final_channels_text})
    await message.delete()
    data = await state.get_data()
    return_state = data.get('return_state', WarmerStates.menu_main)
    await state.set_state(return_state)
    await _update_settings_menu_view(message.bot, user_id, state)

@router.message(WarmerStates.set_dialogue_phrases, F.text)
async def process_warmer_dialogue_phrases(message: Message, state: FSMContext):
    phrases = message.text.strip()
    if not phrases:
        await message.reply("‚ùå –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    user_id = message.from_user.id
    await db_manager.update_warmer_settings(user_id, {"dialogue_phrases": phrases})
    await message.delete()
    data = await state.get_data()
    return_state = data.get('return_state', WarmerStates.menu_main)
    await state.set_state(return_state)
    await _update_settings_menu_view(message.bot, user_id, state)

@router.message(WarmerStates.set_active_hours, F.text)
async def process_warmer_active_hours(message: Message, state: FSMContext):
    match = re.match(r"^\s*(\d{1,2})\s*-\s*(\d{1,2})\s*$", message.text)
    if not match:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–°–¢–ê–†–¢-–ö–û–ù–ï–¶</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>9-22</b>.")
        return
    
    start_h, end_h = int(match.group(1)), int(match.group(2))
    if not (0 <= start_h <= 23 and 0 <= end_h <= 23):
        await message.reply("‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 23.")
        return