# bot/handlers/settings_comments.py
import html
import logging
import os

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Document, Message

from bot.database.db_manager import db_manager
from bot.middlewares import check_subscription
from bot.keyboards import comments_menu_keyboard, settings_keyboard
from bot.states import CommentStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "‚úèÔ∏è –¢–µ–∫—Å—Ç—ã")
async def manage_comments_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    comments = await db_manager.get_comments(user_id)
    photo_path = await db_manager.get_spam_photo(user_id)

    text = "<b>üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–µ–¥–∏–∞ –¥–ª—è —Å–ø–∞–º–∞</b>\n\n"
    
    text += "<b>–¢–µ–∫—É—â–∏–µ —Ç–µ–∫—Å—Ç—ã:</b>\n"
    if comments:
        # Show only first 5 comments for brevity
        display_comments = comments[:5]
        text += "\n".join([f"‚Ä¢ {html.escape(c[:80])}{'...' if len(c) > 80 else ''}" for c in display_comments])
        if len(comments) > 5:
            text += f"\n... –∏ –µ—â–µ {len(comments) - 5}"
    else:
        text += "<i>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.</i>"

    text += "\n\n<b>–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ:</b>\n"
    if photo_path:
        text += "<i>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ ‚úÖ</i>"
    else:
        text += "<i>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</i>"
    
    text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."

    await message.answer(text, reply_markup=comments_menu_keyboard(has_photo=bool(photo_path)))

@router.callback_query(F.data == "edit_spam_texts")
async def edit_spam_texts_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await query.answer()
    await query.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞).\n\n"
        "–ò–ª–∏ <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .txt/.html</b>, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(CommentStates.enter_text)

@router.callback_query(F.data == "add_spam_photo")
async def add_spam_photo_start(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await query.answer()
    await query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º.\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await state.set_state(CommentStates.add_photo)

@router.callback_query(F.data == "delete_spam_photo")
async def delete_spam_photo_handler(query: CallbackQuery):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await db_manager.delete_spam_photo(user_id)
    await query.answer("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
    # Refresh the menu by editing the message
    await query.message.edit_reply_markup(reply_markup=comments_menu_keyboard(has_photo=False))

@router.message(CommentStates.enter_text, F.text)
async def save_comments_from_text(message: Message, state: FSMContext):
    comment_texts = [t.strip() for t in message.text.split(',') if t.strip()]
    if not comment_texts:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
        return

    user_id = message.from_user.id
    await db_manager.update_comments(user_id, comment_texts)
    await message.reply(
        f"‚úÖ –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—Å–µ–≥–æ: {len(comment_texts)}.",
        reply_markup=settings_keyboard()
    )
    await state.clear()

@router.message(CommentStates.enter_text, F.document)
async def save_comments_from_file(message: Message, state: FSMContext, bot: Bot):
    document = message.document
    if not document.file_name.lower().endswith(('.txt', '.html')):
        await message.reply("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt –∏ .html.")
        return

    try:
        file_info = await bot.get_file(document.file_id)
        file_content_bytes = await bot.download_file(file_info.file_path)
        file_content = file_content_bytes.read().decode('utf-8')

        if not file_content.strip():
            await message.reply("‚ùå –§–∞–π–ª –ø—É—Å—Ç.")
            return

        # Save content as a single comment
        await db_manager.update_comments(message.from_user.id, [file_content])
        await message.reply(
            f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ <code>{html.escape(document.file_name)}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.",
            reply_markup=settings_keyboard()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"Error processing comment file for user {message.from_user.id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


@router.message(CommentStates.add_photo, F.photo)
async def save_spam_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    photo_file_id = message.photo[-1].file_id # Get the highest resolution

    media_dir = os.path.abspath(f"media/{user_id}")
    os.makedirs(media_dir, exist_ok=True)
    photo_path = os.path.join(media_dir, "spam_photo.jpg")

    try:
        await bot.download(file=photo_file_id, destination=photo_path)
        await db_manager.set_spam_photo(user_id, photo_path)
        await message.reply(
            "‚úÖ –§–æ—Ç–æ –¥–ª—è —Å–ø–∞–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
            reply_markup=settings_keyboard()
        )
    except Exception as e:
        logger.error(f"Error saving spam photo for user {user_id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()