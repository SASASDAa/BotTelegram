
import logging
import os

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Document, FSInputFile, Message

from bot.client_tasks.scraper import scraper_task
from bot.database.db_manager import db_manager
from bot.keyboards import scraper_menu_keyboard, settings_keyboard
from bot.middlewares import check_subscription
from bot.states import ScraperStates
from bot.utils.safe_task import create_safe_task

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üë§ –°–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
async def scraper_menu(message: Message):
    user_id = message.from_user.id
    scraped_count = await db_manager.get_scraped_users_count(user_id)
    settings = await db_manager.get_ai_settings(user_id)
    filter_level = settings.get("user_activity_filter", "all")
    await message.answer(
        "–ú–µ–Ω—é —Å–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–∑ –≥—Ä—É–ø–ø.",
        reply_markup=scraper_menu_keyboard(scraped_count, filter_level)
    )


@router.callback_query(F.data == "scraper_toggle_filter")
async def toggle_user_activity_filter_callback(query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Å–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    if not await check_subscription(query):
        return
    user_id = query.from_user.id

    current_settings = await db_manager.get_ai_settings(user_id)
    current_filter = current_settings.get("user_activity_filter", "all")

    filter_cycle = ["all", "recent", "week"]
    try:
        current_index = filter_cycle.index(current_filter)
        new_filter = filter_cycle[(current_index + 1) % len(filter_cycle)]
    except ValueError:
        new_filter = "all"

    await db_manager.set_user_activity_filter(user_id, new_filter)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    scraped_count = await db_manager.get_scraped_users_count(user_id)
    markup = scraper_menu_keyboard(scraped_count, new_filter)
    await query.message.edit_reply_markup(reply_markup=markup)
    await query.answer(f"–§–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_filter}")


@router.callback_query(F.data == "scraper_start_new")
async def start_new_scrape(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await state.set_state(ScraperStates.enter_group)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        "–ü—Ä–∏–º–µ—Ä: @durov_russia –∏–ª–∏ https://t.me/tgram\n\n"
        "/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await query.answer()


@router.message(ScraperStates.enter_group)
async def group_to_scrape_received(message: Message, state: FSMContext):
    target_group_input = message.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥, —á—Ç–æ–±—ã Pyrogram –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    target_group = target_group_input
    if target_group.startswith(('http://t.me/', 'https://t.me/')):
        path_part = target_group.split('t.me/')[1]
        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –¥–ª—è —Å–±–æ—Ä–∞
        if not path_part.startswith(('joinchat', '+')):
            # Pyrogram —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç @username
            target_group = '@' + path_part.split('/')[0]

    await state.clear()
    await message.answer(
        f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ <code>{target_group_input}</code>. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        reply_markup=settings_keyboard()
    )
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
    create_safe_task(scraper_task(message.bot, message.from_user.id, target_group), user_id=message.from_user.id, bot=message.bot, task_name="–°–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")


@router.callback_query(F.data == "scraper_export")
async def export_scraped_users(query: CallbackQuery):
    user_id = query.from_user.id
    await query.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏...")

    count = await db_manager.get_scraped_users_count(user_id)
    if count == 0:
        await query.message.answer("–ë–∞–∑–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –≤—ã–≥—Ä—É–∂–∞—Ç—å.")
        return

    file_path = f"scraped_users_{user_id}.txt"
    try:
        written_count = 0
        with open(file_path, "w") as f:
            async for scraped_user_id in db_manager.get_scraped_users_stream(user_id):
                f.write(f"{scraped_user_id}\n")
                written_count += 1

        await query.message.answer_document(
            document=FSInputFile(file_path),
            caption=f"‚úÖ –í–∞—à–∞ –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({written_count} ID) –≥–æ—Ç–æ–≤–∞."
        )
    except Exception as e:
        logger.error(f"Failed to export scraped users for {user_id}: {e}", exc_info=True)
        await query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)


@router.callback_query(F.data == "scraper_import")
async def import_scraped_users_start(query: CallbackQuery, state: FSMContext):
    if not await check_subscription(query):
        return
    await state.set_state(ScraperStates.import_users_file)
    await query.message.edit_text(
        "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .txt —Å–æ —Å–ø–∏—Å–∫–æ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n"
        "–ö–∞–∂–¥—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
        "/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await query.answer()


@router.message(ScraperStates.import_users_file, F.document)
async def import_scraped_users_file_received(message: Message, state: FSMContext):
    document = message.document
    if not document.file_name.lower().endswith('.txt'):
        await message.reply("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt.")
        return

    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    try:
        file_info = await message.bot.get_file(document.file_id)
        file_content_bytes = await message.bot.download_file(file_info.file_path)
        file_content = file_content_bytes.read().decode('utf-8')

        user_ids = [int(line.strip()) for line in file_content.splitlines() if line.strip().isdigit()]

        if not user_ids:
            await message.reply("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await state.clear()
            return

        user_id = message.from_user.id
        added_count = await db_manager.import_scraped_users(user_id, user_ids)
        total_count = await db_manager.get_scraped_users_count(user_id)

        await message.answer(
            f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"‚ñ´Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {added_count}\n"
            f"‚ñ´Ô∏è –í—Å–µ–≥–æ –≤ –≤–∞—à–µ–π –±–∞–∑–µ: {total_count}",
            reply_markup=settings_keyboard()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"Error processing imported users file for user {message.from_user.id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await state.clear()


@router.callback_query(F.data == "scraper_clear_all")
async def clear_scraped_users(query: CallbackQuery):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await db_manager.reset_scraped_users(user_id)
    await query.answer("‚úÖ –ë–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω–∞.", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å 0 –∏ —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
    settings = await db_manager.get_ai_settings(user_id)
    filter_level = settings.get("user_activity_filter", "all")
    await query.message.edit_reply_markup(reply_markup=scraper_menu_keyboard(0, filter_level))