
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.client_tasks.scraper import scraper_task
from bot.database.db_manager import db_manager
from bot.keyboards import scraper_menu_keyboard, settings_keyboard
from bot.middlewares import check_subscription
from bot.states import ScraperStates
from bot.utils.safe_task import create_safe_task

router = Router()


@router.message(F.text == "üë§ –°–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
async def scraper_menu(message: Message):
    user_id = message.from_user.id
    count = await db_manager.get_scraped_users_count(user_id)
    await message.answer(
        "–ú–µ–Ω—é —Å–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–∑ –≥—Ä—É–ø–ø.",
        reply_markup=scraper_menu_keyboard(count)
    )


@router.callback_query(F.data == "scraper_start_new")
async def start_new_scrape(query: CallbackQuery, state: FSMContext):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    await state.set_state(ScraperStates.enter_group)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        "–ü—Ä–∏–º–µ—Ä: @durov_russia –∏–ª–∏ https://t.me/tgram\n\n"
        "/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await query.answer()


@router.message(ScraperStates.enter_group)
async def group_to_scrape_received(message: Message, state: FSMContext):
    target_group_input = message.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥, —á—Ç–æ–±—ã Pyrogram –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    target_group = target_group_input
    if target_group.startswith(('http://t.me/', 'https://t.me/')):
        path_part = target_group.split('t.me/')[1]
        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –¥–ª—è —Å–±–æ—Ä–∞
        if not path_part.startswith(('joinchat', '+')):
            # Pyrogram —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç @username
            target_group = '@' + path_part.split('/')[0]

    await state.clear()
    await message.answer(
        f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ <code>{target_group_input}</code>. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        reply_markup=settings_keyboard()
    )
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
    create_safe_task(scraper_task(message.bot, message.from_user.id, target_group), user_id=message.from_user.id, bot=message.bot, task_name="–°–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")


@router.callback_query(F.data == "scraper_clear_all")
async def clear_scraped_users(query: CallbackQuery):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await check_subscription(query):
        return
    user_id = query.from_user.id
    await db_manager.reset_scraped_users(user_id)
    await query.answer("‚úÖ –ë–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω–∞.", show_alert=True)
    count = await db_manager.get_scraped_users_count(user_id)
    await query.message.edit_reply_markup(reply_markup=scraper_menu_keyboard(count))