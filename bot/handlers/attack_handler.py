# bot/handlers/attack_handler.py
import asyncio
import html
import logging
import os

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import config
from bot.client_tasks.attack_loop import attack_loop_task
from bot.client_tasks.client_manager import (
    ATTACK_STATUS, ATTACK_STATUS_LOCK, ATTACK_STOP_EVENTS, SPAM_STATUS
)
from bot.database.db_manager import db_manager, DatabaseManager
from bot.keyboards import attack_menu_keyboard, select_sessions_keyboard, shop_keyboard, tasks_keyboard
from bot.middlewares import check_subscription
from bot.states import AttackStates

router = Router()
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é ---

def get_attack_menu_text(data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ç–∞–∫–∏ –≤ –õ–°."""
    attack_mode = data.get('attack_mode', 'single')
    nick = data.get('attack_nickname')
    delay = data.get('attack_delay', 1.5)
    use_ai = data.get('attack_use_ai', False)
    is_infinite = data.get('attack_is_infinite', False)
    session_limit = data.get('attack_session_limit')
    skip_admins = data.get('attack_skip_admins', True)
    scraped_count = data.get('scraped_users_count', 0)

    if attack_mode == 'single':
        target_text = f"<b>1. –¶–µ–ª—å (—é–∑–µ—Ä/–≥—Ä—É–ø–ø–∞):</b> {f'<code>{html.escape(nick)}</code>' if nick else '<i>–Ω–µ —É–∫–∞–∑–∞–Ω–∞</i> ‚ö†Ô∏è'}"
    else:
        target_text = f"<b>1. –¶–µ–ª—å:</b> –°–æ–±—Ä–∞–Ω–Ω–∞—è –±–∞–∑–∞ ({scraped_count} —é–∑–µ—Ä–æ–≤)"

    ai_text = "–í–∫–ª ‚úÖ" if use_ai else "–í—ã–∫–ª ‚ùå"
    count_val = data.get('attack_count', 1)
    count_text = "‚àû (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)" if is_infinite else str(count_val)
    skip_admins_text = "–í–∫–ª ‚úÖ" if skip_admins else "–í—ã–∫–ª ‚ùå"

    return (
        f"<b>üí• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ç–∞–∫–∏ –≤ –õ–° (—á–µ—Ä–µ–∑ Telethon)</b>\n\n"
        f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É'.\n\n"
        f"{target_text}\n"
        f"<b>2. –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ 1 —Ü–µ–ª—å):</b> {count_text}\n"
        f"<b>3. –ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay} —Å–µ–∫.\n"
        f"<b>4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò:</b> {ai_text}\n"
        f"<b>5. –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤:</b> {skip_admins_text}"
    )


async def update_attack_menu(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∞—Ç–∞–∫–∏."""
    data = await state.get_data()
    menu_message_id = data.get('attack_menu_message_id')
    if not menu_message_id:
        return

    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=get_attack_menu_text(data),
            reply_markup=attack_menu_keyboard(data)
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∞—Ç–∞–∫–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(F.text == "üí• –ê—Ç–∞–∫–∞ –≤ –õ–°")
async def attack_by_nick_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
    if not await check_subscription(message):
        return

    if ATTACK_STATUS.get(user_id, False):
        await message.reply("‚ö†Ô∏è –ê—Ç–∞–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return

    # –î–ª—è –∞—Ç–∞–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Telethon —Å–µ—Å—Å–∏–∏
    telethon_sessions = await db_manager.get_sessions_by_type(user_id, 'telethon')
    errors = []
    if not telethon_sessions:
        errors.append("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π Telethon –¥–ª—è –∞—Ç–∞–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' -> '–°–µ—Å—Å–∏–∏'.")
    if not await db_manager.get_comments(user_id):
        errors.append("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞—Ç–∞–∫–∏.")
    if errors:
        await message.reply("\n".join(errors))
        return

    # –ü–æ–¥—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Telethon —Å–µ—Å—Å–∏–π
    from bot.client_tasks.client_manager import RESERVED_SESSIONS, RESERVED_SESSIONS_LOCK
    async with RESERVED_SESSIONS_LOCK:
        reserved_for_user = RESERVED_SESSIONS.get(user_id, {})
    all_session_names = {os.path.splitext(os.path.basename(p))[0] for p in telethon_sessions.values()}
    available_session_names = all_session_names - set(reserved_for_user.keys())
    available_sessions_count = len(available_session_names)

    if available_sessions_count == 0:
        await message.reply("‚ùå –í—Å–µ —Å–µ—Å—Å–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö.")
        return

    await state.set_state(AttackStates.select_sessions)
    await message.answer(
        f"–°–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞—Ç–∞–∫–∏? (–î–æ—Å—Ç—É–ø–Ω–æ: {available_sessions_count})",
        reply_markup=select_sessions_keyboard(available_sessions_count, 'attack')
    )


@router.callback_query(F.data.startswith("attack_sessions_"), AttackStates.select_sessions)
async def attack_sessions_selected(query: CallbackQuery, state: FSMContext):
    action = query.data.split('_')[-1]
    await query.answer()

    if action == 'custom':
        await state.set_state(AttackStates.set_session_count)
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π:")
        return
    session_limit = None if action == 'all' else int(action)
    
    scraped_count = await db_manager.get_scraped_users_count(query.from_user.id)
    ai_settings = await db_manager.get_ai_settings(query.from_user.id)
    initial_data = {
        'attack_mode': 'single',
        'attack_count': 10, 'attack_delay': 1.5, 'attack_use_ai': False, 
        'attack_is_infinite': False, 'attack_session_limit': session_limit,
        'scraped_users_count': scraped_count,
        'attack_skip_admins': ai_settings.get('attack_skip_admins', True)
    }
    await state.set_data(initial_data)

    sent_message = await query.message.edit_text(
        get_attack_menu_text(initial_data),
        reply_markup=attack_menu_keyboard(initial_data)
    )
    await state.update_data(attack_menu_message_id=sent_message.message_id)
    await state.set_state(AttackStates.menu)


@router.message(AttackStates.set_session_count)
async def attack_sessions_custom_count(message: Message, state: FSMContext):
    try:
        session_limit = int(message.text)
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º Telethon —Å–µ—Å—Å–∏—è–º
        from bot.client_tasks.client_manager import RESERVED_SESSIONS, RESERVED_SESSIONS_LOCK
        telethon_sessions = await db_manager.get_sessions_by_type(user_id, 'telethon')
        async with RESERVED_SESSIONS_LOCK:
            reserved_for_user = RESERVED_SESSIONS.get(user_id, {})
        all_session_names = {os.path.splitext(os.path.basename(p))[0] for p in telethon_sessions.values()}
        available_session_names = all_session_names - set(reserved_for_user.keys())
        available_sessions_count = len(available_session_names)

        if not (0 < session_limit <= available_sessions_count):
            await message.reply(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {available_sessions_count}.")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        scraped_count = await db_manager.get_scraped_users_count(message.from_user.id)
        ai_settings = await db_manager.get_ai_settings(message.from_user.id)
        initial_data = {
            'attack_mode': 'single',
            'attack_count': 10, 'attack_delay': 1.5, 'attack_use_ai': False,
            'attack_is_infinite': False, 'attack_session_limit': session_limit,
            'scraped_users_count': scraped_count,
            'attack_skip_admins': ai_settings.get('attack_skip_admins', True)
        }
        await state.set_data(initial_data)

        sent_message = await message.answer(
            get_attack_menu_text(initial_data),
            reply_markup=attack_menu_keyboard(initial_data)
        )
        await state.update_data(attack_menu_message_id=sent_message.message_id)
        await state.set_state(AttackStates.menu)
    except (ValueError, TypeError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.callback_query(AttackStates.menu)
async def attack_menu_router(query: CallbackQuery, state: FSMContext):
    action = query.data
    await query.answer()

    if action == "attack_set_nickname":
        await query.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Ü–µ–ª–∏ (@username) –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (@groupname).")
        await state.set_state(AttackStates.set_nickname)
    elif action == "attack_set_count":
        await query.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Ü–µ–ª—å.")
        await state.set_state(AttackStates.set_count)
    elif action == "attack_set_delay":
        await query.message.edit_text(f"‚è± –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω: {config.MIN_DELAY_FOR_ATTACK}).")
        await state.set_state(AttackStates.set_delay)
    elif action == "attack_toggle_mode":
        data = await state.get_data()
        current_mode = data.get('attack_mode', 'single')
        new_mode = 'mass' if current_mode == 'single' else 'single'
        await state.update_data(attack_mode=new_mode)
        if new_mode == 'mass' and data.get('attack_count', 10) > 5:
            await state.update_data(attack_count=1) # Reset count to 1 for mass mode as a sensible default
        await update_attack_menu(query.message, state)
    elif action == "attack_toggle_ai":
        data = await state.get_data()
        await state.update_data(attack_use_ai=not data.get('attack_use_ai', False))
        await update_attack_menu(query.message, state)
    elif action == "attack_toggle_skip_admins":
        user_id = query.from_user.id
        data = await state.get_data()
        new_status = not data.get('attack_skip_admins', True)
        await db_manager.set_attack_skip_admins(user_id, new_status)
        await state.update_data(attack_skip_admins=new_status)
        await update_attack_menu(query.message, state)
    elif action == "attack_toggle_infinite":
        data = await state.get_data()
        await state.update_data(attack_is_infinite=not data.get('attack_is_infinite', False))
        await update_attack_menu(query.message, state)
    elif action == "attack_start":
        await start_attack_from_menu(query, state)


async def start_attack_from_menu(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = await state.get_data()
    attack_mode = data.get('attack_mode', 'single')

    async with ATTACK_STATUS_LOCK:
        if ATTACK_STATUS.get(user_id):
            await query.answer("‚ö†Ô∏è –ê—Ç–∞–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.", show_alert=True)
            return

        if attack_mode == 'single' and not data.get('attack_nickname'):
            await query.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ —Ü–µ–ª–∏!", show_alert=True)
            return
        elif attack_mode == 'mass' and await db_manager.get_scraped_users_count(user_id) == 0:
            await query.answer("‚ùå –í–∞—à–∞ –±–∞–∑–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.", show_alert=True)
            return

        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        ATTACK_STATUS[user_id] = True

    await query.message.delete()
    await state.clear()

    ATTACK_STOP_EVENTS[user_id] = asyncio.Event()

    is_infinite = data.get('attack_is_infinite', False)
    session_limit = data.get('attack_session_limit')

    asyncio.create_task(attack_loop_task(
        user_id=user_id,
        bot=query.bot,
        attack_mode=attack_mode,
        target_nickname=data.get('attack_nickname'),
        message_count=data.get('attack_count', 1),
        attack_delay=data.get('attack_delay', 1.5),
        use_ai=data.get('attack_use_ai', False),
        is_infinite=is_infinite,
        session_limit=session_limit
    ))

    target_display = "–ø–æ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–µ" if attack_mode == 'mass' else f"–Ω–∞ <code>{html.escape(data.get('attack_nickname', '...'))}</code>"
    is_spam_active = SPAM_STATUS.get(user_id, False)
    await query.message.answer(
        f"üöÄ <b>–ê—Ç–∞–∫–∞ –≤ –õ–° {target_display} –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìä –°—Ç–∞—Ç—É—Å'.",
        reply_markup=tasks_keyboard(is_spam_active=is_spam_active, is_attack_active=True)
    )


@router.message(AttackStates.set_nickname)
async def attack_receive_nickname(message: Message, state: FSMContext):
    target_input = message.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥, —á—Ç–æ–±—ã Pyrogram –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    # –∏ –æ–±—ã—á–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã.
    normalized_target = target_input
    if normalized_target.startswith(('http://t.me/', 'https://t.me/')):
        path_part = normalized_target.split('t.me/')[1]
        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã/—é–∑–µ—Ä—ã –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
        if not path_part.startswith(('joinchat', '+')):
            normalized_target = '@' + path_part.split('/')[0]
    elif not normalized_target.startswith('@'):
        normalized_target = '@' + normalized_target

    await state.update_data(attack_nickname=normalized_target)
    await message.delete()
    await update_attack_menu(message, state)
    await state.set_state(AttackStates.menu)


@router.message(AttackStates.set_count)
async def attack_receive_count(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count >= 1:
            await state.update_data(attack_count=count)
    except (ValueError, TypeError):
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥
    await message.delete()
    await update_attack_menu(message, state)
    await state.set_state(AttackStates.menu)


@router.message(AttackStates.set_delay)
async def attack_receive_delay(message: Message, state: FSMContext):
    try:
        delay = float(message.text.strip().replace(',', '.'))
        if delay >= config.MIN_DELAY_FOR_ATTACK:
            await state.update_data(attack_delay=delay)
    except (ValueError, TypeError):
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥
    await message.delete()
    await update_attack_menu(message, state)
    await state.set_state(AttackStates.menu)


@router.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É")
async def stop_attack_command(message: Message):
    user_id = message.from_user.id
    is_spam_active = SPAM_STATUS.get(user_id, False)

    if not ATTACK_STATUS.get(user_id):
        await message.reply("‚ùå –ê—Ç–∞–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=tasks_keyboard(is_spam_active, False))
        return

    event = ATTACK_STOP_EVENTS.get(user_id)
    if event:
        event.set()
        await message.reply("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ç–∞–∫–∏...", reply_markup=tasks_keyboard(is_spam_active, False))
    else:
        async with ATTACK_STATUS_LOCK:
            ATTACK_STATUS[user_id] = False
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞—Ç–∞–∫–∏. –°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω.", reply_markup=tasks_keyboard(is_spam_active, False))


ATTACK_FLOOD_HELP_TEXT = (
    "<b>‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ Flood-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?</b>\n\n"
    "<b>Flood Wait / Peer Flood</b> ‚Äî —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Telegram, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∫–æ–≥–¥–∞ –∞–∫–∫–∞—É–Ω—Ç —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º –ª—é–¥—è–º).\n\n"
    "–≠—Ç–æ <b>–∑–∞—â–∏—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Telegram</b> –¥–ª—è –±–æ—Ä—å–±—ã —Å–æ —Å–ø–∞–º–æ–º, –∞ –Ω–µ –æ—à–∏–±–∫–∞ –±–æ—Ç–∞.\n\n"
    "<b>–ß—Ç–æ —Å–¥–µ–ª–∞–ª –±–æ—Ç?</b>\n"
    "–ß—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–∞–¥–∞—á—É –∞—Ç–∞–∫–∏ –¥–ª—è <b>–≤—Å–µ—Ö —Å–µ—Å—Å–∏–π</b> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ –∞—Ç–∞–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å.\n\n"
    "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>\n"
    "‚Ä¢ <b>–ù–∏—á–µ–≥–æ.</b> –ü—Ä–æ—Å—Ç–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞.\n"
    "‚Ä¢ –ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å —ç—Ç–æ–π –æ—à–∏–±–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ <b>—É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É</b> –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞—Ç–∞–∫–∏.\n"
    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–±–æ–ª—å—à–µ —Å–µ—Å—Å–∏–π</b> –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏.\n"
    "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã \"–ø—Ä–æ–≥—Ä–µ—Ç—ã\" –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤–æ—Ä–µ–≥–∞–º–∏."
)

@router.callback_query(F.data == "attack_flood_help")
async def attack_flood_help_callback(query: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ FloodWait –≤ –∞—Ç–∞–∫–µ."""
    await query.answer()
    await query.message.answer(ATTACK_FLOOD_HELP_TEXT, disable_web_page_preview=True)