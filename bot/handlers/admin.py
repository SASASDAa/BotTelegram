# bot/handlers/admin.py
import asyncio
import html
import uuid
from typing import Callable

from aiogram import F, Bot, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import config
from bot.client_tasks.broadcast import broadcast_task
from bot.filters import IsAdminFilter, IsSuperAdminFilter
from bot.database.db_manager import db_manager
from bot.keyboards import (
    # ... (imports)
    admin_ban_confirm_keyboard, admin_broadcast_confirm_keyboard, admin_shop_settings_keyboard,
    admin_keyboard, admin_promo_list_keyboard, admin_promo_menu_keyboard, admin_restart_confirm_keyboard,
    admin_promo_type_keyboard, manage_admins_keyboard, main_keyboard, InlineKeyboardMarkup, InlineKeyboardButton)
from bot.states import AdminStates

router = Router()

router.message.filter(IsAdminFilter())
router.callback_query.filter(IsAdminFilter())

@router.message(Command("admin"))
async def admin_panel_command(message: Message):
    is_super = message.from_user.id == config.SUPER_ADMIN_ID
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboard(is_super_admin=is_super))

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
async def back_to_admin_menu(message: Message, state: FSMContext):
    await state.clear()
    is_super = message.from_user.id == config.SUPER_ADMIN_ID
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_keyboard(is_super_admin=is_super))

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def bot_stats_command(message: Message):
    stats = await db_manager.get_bot_stats()
    text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"‚ñ´Ô∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}"
    )
    await message.answer(text)

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_start_command(message: Message, state: FSMContext):
    await state.set_state(AdminStates.broadcast_message)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router.message(AdminStates.broadcast_message)
async def broadcast_message_received(message: Message, state: FSMContext):
    await state.update_data(broadcast_text=message.text)
    await state.set_state(AdminStates.broadcast_confirm)
    await message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n---\n{message.text}\n---\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.",
        reply_markup=admin_broadcast_confirm_keyboard()
    )

@router.callback_query(F.data == "confirm_broadcast", AdminStates.broadcast_confirm)
async def broadcast_confirmed(query: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    text = data.get("broadcast_text")
    await state.clear()
    await query.message.edit_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç, –Ω–æ –æ–±–µ—Ä—Ç–∫–∞ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    from bot.utils.safe_task import create_safe_task
    create_safe_task(broadcast_task(bot, query.from_user.id, text), user_id=query.from_user.id, bot=bot, task_name="–†–∞—Å—Å—ã–ª–∫–∞")

@router.callback_query(F.data == "cancel_broadcast", AdminStates.broadcast_confirm)
async def broadcast_canceled(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# --- –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@router.message(F.text.in_({"‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}))
async def grant_sub_start(message: Message, state: FSMContext):
    if message.text == "‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await state.update_data(sub_action='add')
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        await state.update_data(sub_action='remove')
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await state.set_state(AdminStates.grant_sub_user_id)

@router.message(AdminStates.grant_sub_user_id)
async def grant_sub_get_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminStates.grant_sub_days)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>.")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(AdminStates.grant_sub_days)
async def grant_sub_get_days(message: Message, state: FSMContext, bot: Bot):
    try:
        days = int(message.text)
        if days <= 0:
            await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        data = await state.get_data()
        user_id = data['target_user_id']
        action = data.get('sub_action', 'add')
        
        effective_days = days if action == 'add' else -days
        
        new_expiry_date = await db_manager.grant_subscription(user_id, effective_days)
        expiry_str = new_expiry_date.strftime('%Y-%m-%d %H:%M')
        
        if action == 'add':
            response_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_str}"
            notification_text = f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ {days} –¥–Ω–µ–π!\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_str}"
        else:
            response_text = f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –æ—Ç–æ–∑–≤–∞–Ω–æ {days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_str}"
            notification_text = f"‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–æ–∑–≤–∞–ª —É –≤–∞—Å {days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_str}"
        is_super = message.from_user.id == config.SUPER_ADMIN_ID
        await message.answer(response_text, reply_markup=admin_keyboard(is_super_admin=is_super))
        
        try:
            await bot.send_message(user_id, notification_text)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
        await state.clear()
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# --- –ë–∞–Ω/–†–∞–∑–±–∞–Ω ---
@router.message(F.text == "üö´ –ë–∞–Ω/–†–∞–∑–±–∞–Ω —é–∑–µ—Ä–∞")
async def ban_user_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.ban_user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–æ–º. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router.message(AdminStates.ban_user_id)
async def ban_user_get_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        sub_status = await db_manager.get_subscription_status(user_id)
        is_banned = sub_status.get('is_banned', False)

        status_text = "–≤ –±–∞–Ω–µ üö´" if is_banned else "–Ω–µ –≤ –±–∞–Ω–µ ‚úÖ"
        
        await state.set_state(AdminStates.ban_user_confirm)
        
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Å–µ–π—á–∞—Å {status_text}.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=admin_ban_confirm_keyboard(user_id, is_banned)
        )
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data.startswith("ban_user_"), AdminStates.ban_user_confirm)
async def ban_user_confirm_callback(query: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = int(query.data.split('_')[-1])
    await db_manager.set_ban_status(user_id, True)
    await query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –∑–∞–±–∞–Ω–µ–Ω.")
    try:
        await bot.send_message(user_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass # User might have blocked the bot
    await state.clear()

@router.callback_query(F.data.startswith("unban_user_"), AdminStates.ban_user_confirm)
async def unban_user_confirm_callback(query: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = int(query.data.split('_')[-1])
    await db_manager.set_ban_status(user_id, False)
    await query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    try:
        await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    await state.clear()

@router.callback_query(F.data == "cancel_ban", AdminStates.ban_user_confirm)
async def ban_user_cancel_callback(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- –ü—Ä–æ–º–æ–∫–æ–¥—ã ---
@router.message(F.text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def promo_codes_menu(message: Message):
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=admin_promo_menu_keyboard())

@router.callback_query(F.data == "admin_create_promo")
async def create_promo_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.create_promo_code_days)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router.message(AdminStates.create_promo_code_days)
async def create_promo_get_days(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(promo_days=days)
        await state.set_state(AdminStates.create_promo_code_type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=admin_promo_type_keyboard())
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data.startswith("promo_type_"), AdminStates.create_promo_code_type)
async def create_promo_get_type(query: CallbackQuery, state: FSMContext):
    promo_type = query.data.split('_')[-1]
    
    if promo_type == 'single':
        data = await state.get_data()
        days = data['promo_days']
        max_activations = 1
        
        promo_code = f"PROMO-{uuid.uuid4().hex[:8].upper()}"
        await db_manager.create_promo_code(promo_code, days, max_activations)
        
        await query.message.edit_text(
            f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: <code>{promo_code}</code>\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π.",
            reply_markup=admin_promo_menu_keyboard()
        )
        await state.clear()
    elif promo_type == 'reusable':
        await state.set_state(AdminStates.create_promo_code_activations)
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>0</b> –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π.\n"
            "/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )

@router.message(AdminStates.create_promo_code_activations)
async def create_promo_get_activations(message: Message, state: FSMContext):
    try:
        max_activations = int(message.text)
        if max_activations < 0:
            await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return

        data = await state.get_data()
        days = data['promo_days']
        
        promo_code = f"MULTI-{uuid.uuid4().hex[:8].upper()}"
        await db_manager.create_promo_code(promo_code, days, max_activations)
        
        limit_text = "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ" if max_activations == 0 else max_activations
        
        await message.answer(
            f"‚úÖ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: <code>{promo_code}</code>\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π.\n"
            f"–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {limit_text}.",
            reply_markup=admin_promo_menu_keyboard()
        )
        await state.clear()

    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data == "admin_list_promo")
async def list_promo_codes(query: CallbackQuery):
    codes = await db_manager.get_all_promo_codes_details()
    text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:"
    if not codes:
        text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç."
    
    await query.message.edit_text(text, reply_markup=admin_promo_list_keyboard(codes))

@router.callback_query(F.data.startswith("view_promo_"))
async def view_promo_details(query: CallbackQuery, bot: Bot):
    code = query.data.split('_')[-1]
    details = await db_manager.get_promo_code_details(code)

    if not details:
        await query.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    max_act_text = "‚àû" if details['max_activations'] == 0 else details['max_activations']
    text = (f"<b>üîé –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code></b>\n\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {details['duration_days']} –¥–Ω.\n"
            f"<b>–ê–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {details['current_activations']} / {max_act_text}\n\n"
            f"<b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏:</b>\n")

    if not details['activations']:
        text += "<i>–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –∫–æ–¥.</i>"
    else:
        user_info_list = [f"  - <code>{act['user_id']}</code> –≤ {act['activated_at'].strftime('%Y-%m-%d %H:%M')}" for act in details['activations']]
        text += "\n".join(user_info_list)

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
    await query.message.edit_text(text)

@router.callback_query(F.data.startswith("admin_delete_promo_"))
async def delete_promo_code(query: CallbackQuery):
    code_to_delete = query.data.split('_')[-1]
    await db_manager.delete_promo_code(code_to_delete)
    await query.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code_to_delete} —É–¥–∞–ª–µ–Ω.")
    codes = await db_manager.get_all_promo_codes_details()
    text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:" if codes else "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç."
    await query.message.edit_text(text, reply_markup=admin_promo_list_keyboard(codes))

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞) ---
@router.message(F.text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", IsSuperAdminFilter())
async def manage_admins_menu(message: Message):
    admins = await db_manager.get_all_admins()
    await message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.",
        reply_markup=manage_admins_keyboard(admins)
    )

@router.callback_query(F.data == "add_admin", IsSuperAdminFilter())
async def add_admin_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.add_admin_id)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await query.answer()

@router.message(AdminStates.add_admin_id, IsSuperAdminFilter())
async def add_admin_get_id(message: Message, state: FSMContext, bot: Bot):
    try:
        user_id = int(message.text)
        current_role = await db_manager.get_user_role(user_id)
        if current_role in ['admin', 'super_admin']:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await db_manager.set_user_role(user_id, 'admin')
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            try:
                await bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass # ignore if bot is blocked
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    finally:
        await state.clear()
        admins = await db_manager.get_all_admins()
        await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=manage_admins_keyboard(admins))

@router.callback_query(F.data.startswith("remove_admin_"), IsSuperAdminFilter())
async def remove_admin_callback(query: CallbackQuery, bot: Bot):
    user_id_to_remove = int(query.data.split('_')[-1])
    
    if user_id_to_remove == config.SUPER_ADMIN_ID:
        await query.answer("üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
        
    await db_manager.set_user_role(user_id_to_remove, 'user')
    await query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_remove} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
    
    try:
        await bot.send_message(user_id_to_remove, "‚ùó –í—ã –±—ã–ª–∏ –ª–∏—à–µ–Ω—ã –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception:
        pass
        
    admins = await db_manager.get_all_admins()
    await query.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=manage_admins_keyboard(admins))


# --- Shop Settings (Super Admin only) ---
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞", IsSuperAdminFilter())
async def shop_settings_menu(message: Message):
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=await admin_shop_settings_keyboard()
    )

@router.callback_query(F.data == "admin_set_support_contact", IsSuperAdminFilter())
async def set_support_contact_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.set_support_contact)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ (—é–∑–µ—Ä–Ω–µ–π–º @username –∏–ª–∏ —Å—Å—ã–ª–∫–∞ https://...).\n"
        "/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await query.answer()

@router.message(AdminStates.set_support_contact, IsSuperAdminFilter())
async def set_support_contact_received(message: Message, state: FSMContext):
    contact = message.text.strip()
    await db_manager.set_bot_setting('support_contact', contact)
    await state.clear()
    await message.answer(
        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.\n–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {contact}",
        reply_markup=await admin_shop_settings_keyboard()
    )

@router.callback_query(F.data == "admin_toggle_buy_sessions", IsSuperAdminFilter())
async def toggle_buy_sessions_button(query: CallbackQuery):
    current_val = await db_manager.get_bot_setting('show_buy_sessions_button')
    new_val = '0' if current_val != '0' else '1'
    await db_manager.set_bot_setting('show_buy_sessions_button', new_val)
    await query.message.edit_reply_markup(reply_markup=await admin_shop_settings_keyboard())
    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_val != '0' else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    await query.answer(f"–ö–Ω–æ–ø–∫–∞ '–ö—É–ø–∏—Ç—å —Å–µ—Å—Å–∏–∏' {status_text}")

# --- –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞) ---
@router.message(F.text == "üõ†Ô∏è –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã", IsSuperAdminFilter())
async def toggle_maintenance_mode(message: Message):
    current_status_str = await db_manager.get_bot_setting("maintenance")
    current_status = current_status_str == "1"
    new_status = not current_status
    await db_manager.set_bot_setting("maintenance", "1" if new_status else "0")
    if new_status:
        notification_text = "üõ†Ô∏è <b>–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.</b>\n\n–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
    else:
        notification_text = "‚úÖ <b>–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.</b>\n\n–ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await message.answer(notification_text)

# --- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞) ---
@router.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞", IsSuperAdminFilter())
async def restart_bot_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.restart_confirm)
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞?\n"
        "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=admin_restart_confirm_keyboard()
    )

@router.callback_query(F.data == "confirm_restart", AdminStates.restart_confirm)
async def restart_bot_confirmed(query: CallbackQuery, state: FSMContext, bot: Bot, restart_function: Callable):
    await state.clear()
    await query.message.edit_text("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞. –ë–æ—Ç —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–π.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    asyncio.create_task(restart_function(bot))

@router.callback_query(F.data == "cancel_restart", AdminStates.restart_confirm)
async def restart_bot_canceled(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
@router.message(F.text == "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ")
async def user_info_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.user_info_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router.message(AdminStates.user_info_id)
async def get_user_info(message: Message, state: FSMContext, bot: Bot):
    try:
        user_id = int(message.text)
        await state.clear()

        # Get user info from Telegram
        try:
            user_chat = await bot.get_chat(user_id)
            username = f"@{user_chat.username}" if user_chat.username else "–Ω–µ—Ç"
            full_name = html.escape(user_chat.full_name)
            user_info_text = (
                f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram</b>\n"
                f"‚ñ´Ô∏è Full Name: {full_name}\n"
                f"‚ñ´Ô∏è Username: {username}\n"
            )
        except Exception:
            user_info_text = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram</b>\n‚ñ´Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º)."

        # Get subscription info
        sub_status = await db_manager.get_subscription_status(user_id)
        if sub_status['active']:
            expires_at_str = sub_status['expires_at'].strftime('%Y-%m-%d %H:%M')
            sub_text = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires_at_str} ‚úÖ"
        else:
            sub_text = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå"

        ban_text = "–î–∞ üö´" if sub_status.get('is_banned') else "–ù–µ—Ç ‚úÖ"

        # Get bot data
        user_data = await db_manager.get_user_data(user_id)
        chats_count = await db_manager.get_chats_count(user_id)
        comments = await db_manager.get_comments(user_id)
        delay = await db_manager.get_delay(user_id)

        bot_data_text = (
            f"\n<b>–î–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ</b>\n"
            f"‚ñ´Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞: {sub_text}\n"
            f"‚ñ´Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {ban_text}\n"
            f"‚ñ´Ô∏è –°–µ—Å—Å–∏–π: {len(user_data['sessions'])}\n"
            f"‚ñ´Ô∏è –ì—Ä—É–ø–ø: {chats_count}\n"
            f"‚ñ´Ô∏è –ü—Ä–æ–∫—Å–∏: {len(user_data['proxies'])}\n"
            f"‚ñ´Ô∏è –¢–µ–∫—Å—Ç–æ–≤: {len(comments)}\n"
            f"‚ñ´Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫."
        )

        is_super = message.from_user.id == config.SUPER_ADMIN_ID
        await message.answer(f"<b>üîé –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code></b>\n\n{user_info_text}{bot_data_text}", reply_markup=admin_keyboard(is_super_admin=is_super))

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")