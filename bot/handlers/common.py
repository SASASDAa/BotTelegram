# bot/handlers/common.py
import asyncio
import html

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from bot.database.db_manager import db_manager
from bot.keyboards import (main_keyboard, reset_keyboard, settings_keyboard, shop_keyboard,
                           tasks_keyboard)
from bot.middlewares import check_subscription

router = Router()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    user = message.from_user
    await db_manager.add_bot_user(user.id, user.username)
    await message.answer( # pragma: no cover
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_keyboard()
    )

@router.callback_query(F.data == "noop_answer")
async def noop_answer_callback(query: CallbackQuery):
    """Handles callbacks from non-interactive buttons, just to acknowledge them."""
    await query.answer()

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())


@router.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu_command(message: Message):
    await message.answer("‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=settings_keyboard())


@router.message(F.text == "üöÄ –ó–∞–¥–∞—á–∏")
async def tasks_menu_command(message: Message):
    # Local import to break circular dependency
    from bot.client_tasks.client_manager import (
        SPAM_STATUS, ATTACK_STATUS
    )
    user_id = message.from_user.id
    is_spam = SPAM_STATUS.get(user_id, False)
    is_attack = ATTACK_STATUS.get(user_id, False)
    await message.answer("üöÄ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:", reply_markup=tasks_keyboard(is_spam, is_attack))


@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop_menu_command(message: Message):
    text = (
        "<b>üõí –ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏.\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    await message.answer(text, reply_markup=await shop_keyboard())


@router.message(F.text == "üîÑ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö")
async def reset_data_command(message: Message):
    await message.answer("üîÑ –ú–µ–Ω—é —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=reset_keyboard())


@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def show_status_command(message: Message):
    # Local import to break circular dependency
    from bot.client_tasks.client_manager import (
        ATTACK_STATS, ATTACK_STATUS, RESERVED_SESSIONS, RESERVED_SESSIONS_LOCK,
        SPAM_STATS, SPAM_STATUS, WARMER_STATS, WARMER_STATUS
    )
    user_id = message.from_user.id
    user_data = await db_manager.get_user_data(user_id)
    chats_count = await db_manager.get_chats_count(user_id)
    comments = await db_manager.get_comments(user_id)
    delay = await db_manager.get_delay(user_id)
    ai_conf = await db_manager.get_ai_settings(user_id)
    sub_conf = await db_manager.get_subscription_status(user_id)
    auto_leave_status = '–í–∫–ª ‚úÖ' if ai_conf.get('auto_leave_enabled') else '–í—ã–∫–ª ‚ùå'
    persistent_spam_status = '–í–∫–ª ‚úÖ' if ai_conf.get('persistent_spam') else '–í—ã–∫–ª ‚ùå'

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –£–º–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–µ—Å—Å–∏–π ---
    total_sessions = len(user_data['sessions'])
    spam_sessions_count = 0
    attack_sessions_count = 0
    async with RESERVED_SESSIONS_LOCK:
        reserved_for_user = RESERVED_SESSIONS.get(user_id, {})
        for task_type in reserved_for_user.values():
            if task_type == 'spam':
                spam_sessions_count += 1
            elif task_type == 'attack':
                attack_sessions_count += 1
    
    used_sessions = spam_sessions_count + attack_sessions_count
    available_sessions = total_sessions - used_sessions
    
    sessions_status_parts = [f"–í—Å–µ–≥–æ: {total_sessions}"]
    if used_sessions > 0:
        sessions_status_parts.append(f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_sessions}")
    sessions_status_text = " | ".join(sessions_status_parts)

    status_text = (
        f"<b>üìä –°—Ç–∞—Ç—É—Å –¥–ª—è {message.from_user.mention_html()}:</b>\n\n"
        f"‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞: {'–ê–∫—Ç–∏–≤–Ω–∞' if sub_conf['active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
        f"üì± –°–µ—Å—Å–∏–∏: {sessions_status_text}\n"
        f"üì¢ –ì—Ä—É–ø–ø: {chats_count}\n"
        f"üåê –ü—Ä–æ–∫—Å–∏: {len(user_data['proxies'])}\n"
        f"üí¨ –¢–µ–∫—Å—Ç–æ–≤: {len(comments)}\n\n"
        f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á:</b>\n"
        f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–ø–∞–º): {delay} —Å–µ–∫.\n"
        f"ü§ñ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò: {'–í–∫–ª ‚úÖ' if ai_conf.get('enabled') else '–í—ã–∫–ª ‚ùå'}"
        f" (–ö–ª—é—á: {'–ï—Å—Ç—å' if ai_conf.get('api_key') else '–ù–µ—Ç'})\n"
        f"üîÅ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø–∞–º: {persistent_spam_status}\n"
        f"üì§ –ê–≤—Ç–æ–≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø: {auto_leave_status}\n\n"
    )
    if SPAM_STATUS.get(user_id, False):
        stats = SPAM_STATS.get(user_id, {})
        status_text += (
            f"<b>üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã –∞–∫—Ç–∏–≤–µ–Ω!</b>\n"
            f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('messages', 0)}\n"
            f"   –û—à–∏–±–æ–∫: {stats.get('errors', 0)}\n"
            f"   –°–µ—Å—Å–∏–π –≤ —Ä–∞–±–æ—Ç–µ: {stats.get('sessions_initial_count', '?')}\n\n"
        )
    else:
        status_text += "<i>üí§ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.</i>\n\n"
    if ATTACK_STATUS.get(user_id, False):
        stats = ATTACK_STATS.get(user_id, {})
        safe_nick = html.escape(stats.get('nickname', 'N/A'))
        status_text += (
            f"<b>üí• –ê—Ç–∞–∫–∞ –≤ –õ–° –∞–∫—Ç–∏–≤–Ω–∞!</b>\n"
            f"   –¶–µ–ª—å: <code>{safe_nick}</code>\n"
            f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('messages', 0)} / {stats.get('total_messages', '?')}\n"
            f"   –û—à–∏–±–æ–∫: {stats.get('errors', 0)}\n"
            f"   –°–µ—Å—Å–∏–π –≤ —Ä–∞–±–æ—Ç–µ: {stats.get('total_sessions', '?')}\n"
            f"   –ó–∞–¥–µ—Ä–∂–∫–∞: {stats.get('delay', '?')} —Å–µ–∫."
        )
    else:
        status_text += "<i>üí§ –ê—Ç–∞–∫–∞ –≤ –õ–° –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.</i>\n\n"

    if WARMER_STATUS.get(user_id, False):
        stats = WARMER_STATS.get(user_id, {})
        status_text += (
            f"<b>üî• –ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω!</b>\n"
            f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('actions_done', 0)}\n"
            f"   –û—à–∏–±–æ–∫: {stats.get('errors', 0)}\n"
            f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats.get('active_sessions', '?')}"
        )
    else:
        status_text += "<i>üí§ –ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.</i>"
    await message.answer(status_text)


# --- Reset Handlers ---
@router.message(F.text == "üóëÔ∏è –°–µ—Å—Å–∏–∏")
async def reset_all_sessions_command(message: Message):
    if not await check_subscription(message):
        return
    await db_manager.reset_sessions(message.from_user.id)
    await message.answer("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=reset_keyboard())

@router.message(F.text == "üóëÔ∏è –ì—Ä—É–ø–ø—ã")
async def reset_all_chats_command(message: Message):
    if not await check_subscription(message):
        return
    await db_manager.reset_chats(message.from_user.id)
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –æ—á–∏—â–µ–Ω.", reply_markup=reset_keyboard())

@router.message(F.text == "üóëÔ∏è –¢–µ–∫—Å—Ç—ã")
async def reset_all_comments_command(message: Message):
    if not await check_subscription(message):
        return
    await db_manager.reset_comments(message.from_user.id)
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –æ—á–∏—â–µ–Ω—ã.", reply_markup=reset_keyboard())

@router.message(F.text == "üóëÔ∏è –ü—Ä–æ–∫—Å–∏")
async def reset_all_proxies_command(message: Message):
    if not await check_subscription(message):
        return
    await db_manager.reset_proxies(message.from_user.id)
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –æ—á–∏—â–µ–Ω.", reply_markup=reset_keyboard())

@router.message(F.text == "üóëÔ∏è –í—Å—ë")
async def reset_everything_command(message: Message):
    if not await check_subscription(message):
        return
    user_id = message.from_user.id
    # Local import to break circular dependency
    from bot.client_tasks.client_manager import (
        SPAM_STATUS, ATTACK_STATUS, STOP_EVENTS, ATTACK_STOP_EVENTS
    )
    stopped = False
    if SPAM_STATUS.get(user_id, False):
        event = STOP_EVENTS.pop(user_id, None)
        if event: event.set()
        stopped = True
    if ATTACK_STATUS.get(user_id, False):
        event = ATTACK_STOP_EVENTS.pop(user_id, None)
        if event: event.set()
        stopped = True
    if stopped:
        await message.answer("üõë –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º —Å–±—Ä–æ—Å–æ–º...")
        await asyncio.sleep(2)
    await db_manager.reset_sessions(user_id)
    await db_manager.reset_chats(user_id)
    await db_manager.reset_comments(user_id)
    await db_manager.reset_proxies(user_id)
    await db_manager.reset_scraped_users(user_id)
    await db_manager.update_delay(user_id, 20) # Reset to default
    await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å–µ—Å—Å–∏–∏, –≥—Ä—É–ø–ø—ã, —Ç–µ–∫—Å—Ç—ã, –ø—Ä–æ–∫—Å–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —é–∑–µ—Ä—ã, –∑–∞–¥–µ—Ä–∂–∫–∞) —Å–±—Ä–æ—à–µ–Ω—ã!", reply_markup=main_keyboard())