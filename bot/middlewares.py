# bot/middlewares.py
import logging
from typing import Any, Awaitable, Callable, Dict, Optional, Union

from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Message, TelegramObject

from bot.database.db_manager import db_manager
from bot.keyboards import maintenance_keyboard, shop_keyboard

logger = logging.getLogger(__name__)

async def check_subscription(event: Union[Message, CallbackQuery]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.
    –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.
    """
    user_id = event.from_user.id
    # –ê–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
    role = await db_manager.get_user_role(user_id)
    if role in ['admin', 'super_admin']:
        return True

    sub_status = await db_manager.get_subscription_status(user_id)
    if sub_status['active']:
        return True

    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    text = "‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞."
    if isinstance(event, Message):
        await event.answer(text, reply_markup=await shop_keyboard())
    elif isinstance(event, CallbackQuery):
        await event.answer(text, show_alert=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, —Ç–∞–∫ –∫–∞–∫ –º–µ–Ω—é –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ
        await event.message.answer(text, reply_markup=await shop_keyboard())
    return False

class AccessMiddleware(BaseMiddleware):
    def __init__(self, super_admin_id: int):
        self.super_admin_id = super_admin_id

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        logger.info(f"Middleware triggered for event {type(event).__name__} from user {data['event_from_user'].id}")

        user = data.get('event_from_user')
        if not user:
            logger.warning("Middleware SKIPPING: 'event_from_user' not found in data.")
            return await handler(event, data)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã.
        is_maintenance_str: Optional[str] = await db_manager.get_bot_setting("maintenance")
        logger.info(f"Middleware: User {user.id}, Maintenance mode value from DB: '{is_maintenance_str}'")

        if is_maintenance_str == "1":
            if user.id != self.super_admin_id:
                logger.info(f"Middleware: User {user.id} blocked by maintenance mode.")
                text = "üõ†Ô∏è <b>–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ú—ã —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è!"
                if isinstance(event, Message):
                    await event.answer(text, reply_markup=maintenance_keyboard())
                elif isinstance(event, CallbackQuery):
                    await event.answer(text, show_alert=True)
                    try:
                        await event.message.edit_reply_markup(reply_markup=None)
                    except Exception:
                        pass
                return
            else:
                logger.info(f"Middleware: Superadmin {user.id} bypassed maintenance mode.")

        # 2. –ê–¥–º–∏–Ω—ã –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –æ–±—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–∞–Ω.
        role = await db_manager.get_user_role(user.id)
        if role in ['admin', 'super_admin']:
            return await handler(event, data)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        sub_status = await db_manager.get_subscription_status(user.id)
        if sub_status.get('is_banned', False):
            text = "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            if isinstance(event, Message):
                await event.answer(text)
            elif isinstance(event, CallbackQuery):
                await event.answer(text, show_alert=True)
            return

        # 4. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ.
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –≤ —Å–∞–º–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö.
        return await handler(event, data)