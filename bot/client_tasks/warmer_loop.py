# bot/client_tasks/warmer_loop.py
import asyncio
import html
import logging
import os
import random
import time
from collections import Counter, deque
from datetime import datetime, timedelta

from aiogram import Bot
from pyrogram.enums import ChatType, UserStatus
from pyrogram.errors import (
    AuthKeyUnregistered, UserDeactivated, FloodWait, UserChannelsTooMuch,
    MsgIdInvalid, ReactionEmpty
)

from bot.client_tasks.client_manager import (
    ACTIVE_WARMER_TASKS, WARMER_STATS, WARMER_STATUS, WARMER_STATUS_LOCK,
    WARMER_STOP_EVENTS, get_connected_client, SESSION_MUTE_LOCK,
    SESSION_MUTE_UNTIL
)
from bot.client_tasks.task_utils import record_worker_session_failure
from bot.database.db_manager import db_manager
from bot.keyboards import warmer_menu_keyboard

logger = logging.getLogger(__name__)

class PartnerUnavailableError(Exception):
    """Custom exception for when a dialogue partner is no longer available."""
    pass


REACTION_EMOJIS = ["üëç", "üî•", "‚ù§Ô∏è", "ü•∞", "üëè", "üòÅ", "üéâ", "üíØ", "üëå"]

async def _perform_join_action(client, target_channels: list[str], log_prefix: str) -> str:
    """Joins a channel from the provided list."""
    if not target_channels:
        raise ValueError("–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—É—Å—Ç.")

    target_channel_input = random.choice(target_channels)

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ ---
    # Pyrogram –æ–∂–∏–¥–∞–µ—Ç @username, –∞ –Ω–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É https://t.me/username
    target_channel = target_channel_input
    if target_channel.startswith(('http://t.me/', 'https://t.me/')):
        path_part = target_channel.split('t.me/')[1]
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, joinchat-—Å—Å—ã–ª–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if not path_part.startswith(('joinchat', '+')):
            target_channel = '@' + path_part.split('/')[0]

    logger.info(f"{log_prefix}: –ü—ã—Ç–∞—é—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª '{target_channel_input}' (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ '{target_channel}')")

    await client.join_chat(target_channel)
    logger.info(f"{log_prefix}: –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ {target_channel_input}")
    return f"–í—Å—Ç—É–ø–∏–ª –≤ {target_channel_input}"

async def _perform_reaction_action(client, target_channels: list[str], log_prefix: str) -> str:
    """Finds a post in a random channel from the target list and reacts to it."""
    logger.info(f"{log_prefix}: –ò—â—É –ø–æ—Å—Ç –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.")

    if not target_channels:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π.")

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π
    random.shuffle(target_channels)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–¥–∞—Ç—å—Å—è
    for channel_identifier in target_channels[:5]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤ –Ω–µ–º —Å–æ—Å—Ç–æ–∏—Ç
            # –≠—Ç–æ —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞, –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ @username
            chat = await client.get_chat(channel_identifier)

            messages = [m async for m in client.get_chat_history(chat.id, limit=20)]
            if not messages:
                logger.debug(f"{log_prefix}: –í —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ {chat.title} –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–∏–π.")
                continue

            target_message = random.choice(messages)
            reaction = random.choice(REACTION_EMOJIS)

            await client.send_reaction(chat.id, target_message.id, reaction)
            logger.info(f"{log_prefix}: –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é '{reaction}' –≤ {chat.title}")
            return f"–†–µ–∞–∫—Ü–∏—è '{reaction}' –≤ {chat.title}"

        except (MsgIdInvalid, ReactionEmpty):
            logger.debug(f"{log_prefix}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –≤ {channel_identifier} (–ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω/—Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã). –ü—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.")
            continue # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
            logger.warning(f"{log_prefix}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ü–µ–ª–µ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º {channel_identifier}: {e}. –ü—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π.")
            continue

    # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∞ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏, –∑–Ω–∞—á–∏—Ç, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")

async def _perform_dialogue_action(client, partner_peer_id: int, dialogue_phrases: list[str], log_prefix: str) -> str:
    """Sends a message to a partner session."""
    if not dialogue_phrases:
        raise ValueError("–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç.")
    
    phrase = random.choice(dialogue_phrases)
    logger.info(f"{log_prefix}: –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É ({partner_peer_id}): '{phrase[:30]}...'")
    await client.send_message(partner_peer_id, phrase)
    return f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É ({partner_peer_id})"

async def _warmer_worker(
    bot: Bot, user_id: int, session_name: str, phone_for_log: str,
    settings: dict, stop_event: asyncio.Event, stats_lock: asyncio.Lock,
    partner_peer_id: int | None
):
    """Worker task for a single session to perform warming actions."""
    log_prefix = f"WARMER_WORKER [{phone_for_log}]"
    logger.info(f"{log_prefix}: –ó–∞–ø—É—â–µ–Ω.")

    def reset_daily_actions():
        """Helper to reset daily action counters."""
        return {
            'join': settings.get('join_channels_per_day', 2),
            'react': settings.get('send_reactions_per_day', 5),
            'dialogue': settings.get('dialogues_per_day', 3)
        }

    client = None
    actions_per_day = reset_daily_actions()
    current_day = datetime.now().day
    target_channels = [ch.strip() for ch in settings.get('target_channels', '').split(',') if ch.strip()]
    dialogue_phrases = [p.strip() for p in settings.get('dialogue_phrases', '').split(',') if p.strip()]
    
    # Make partner_peer_id mutable within the worker
    current_partner_peer_id = partner_peer_id
    try:
        client = await get_connected_client(user_id, session_name, no_updates=True)
        if not client:
            await record_worker_session_failure(user_id, phone_for_log, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", stats_lock, WARMER_STATS, log_prefix, bot)
            return

        # --- –ò–ó–ú–ï–ù–ï–ù–û: –£—Å–∏–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ client.me ---
        # –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ 'NoneType'
        me = await client.get_me()
        if not me:
            logger.warning(f"{log_prefix}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ (get_me() failed). –ó–∞–≤–µ—Ä—à–∞—é –≤–æ—Ä–∫–µ—Ä.")
            await record_worker_session_failure(user_id, phone_for_log, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ", stats_lock, WARMER_STATS, log_prefix, bot)
            return
        
        client.me = me

        while not stop_event.is_set():
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
            now = datetime.now()
            if settings.get('active_hours_enabled'):
                start_h = settings.get('active_hours_start')
                end_h = settings.get('active_hours_end')
                is_active_time = False
                if start_h < end_h: # –î–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ (e.g., 9-22)
                    if start_h <= now.hour < end_h: is_active_time = True
                else: # –ù–æ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ (e.g., 22-06)
                    if now.hour >= start_h or now.hour < end_h: is_active_time = True

                if not is_active_time:
                    if now.hour >= end_h and start_h < end_h: # –ü–æ—Å–ª–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                        target_time = now.replace(hour=start_h, minute=0, second=0, microsecond=0) + timedelta(days=1)
                    else: # –î–æ –Ω–∞—á–∞–ª–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è "–ø–µ—Ä–µ—Ä—ã–≤–∞" –Ω–æ—á–Ω–æ–≥–æ
                        target_time = now.replace(hour=start_h, minute=0, second=0, microsecond=0)
                        if target_time < now: # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ
                             target_time += timedelta(days=1)

                    sleep_duration = (target_time - now).total_seconds()
                    logger.info(f"{log_prefix}: –ù–µ—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã. –ó–∞—Å—ã–ø–∞—é –Ω–∞ {sleep_duration / 3600:.2f} —á–∞—Å–æ–≤ –¥–æ {start_h:02}:00.")
                    try:
                        await asyncio.wait_for(stop_event.wait(), timeout=sleep_duration)
                        break # Stop event was set during sleep
                    except asyncio.TimeoutError:
                        continue # Woke up naturally, continue loop

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å, –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if now.day != current_day:
                logger.info(f"{log_prefix}: –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å. –°–±—Ä–∞—Å—ã–≤–∞—é –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π.")
                actions_per_day = reset_daily_actions()
                current_day = now.day

            # 2. –í—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            possible_actions = []
            if actions_per_day['join'] > 0 and target_channels: possible_actions.append('join')
            if actions_per_day['react'] > 0 and target_channels: possible_actions.append('react')
            if actions_per_day['dialogue'] > 0 and current_partner_peer_id and dialogue_phrases:
                possible_actions.append('dialogue')

            if not possible_actions:
                logger.info(f"{log_prefix}: –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–Ω–∞.")
                # Fall through to the main sleep logic at the end of the loop
            else:
                action_type = random.choice(possible_actions)
            
                try:
                    if action_type == 'join':
                        action_result = await _perform_join_action(client, target_channels, log_prefix)
                        actions_per_day['join'] -= 1
                    elif action_type == 'react':
                        action_result = await _perform_reaction_action(client, target_channels, log_prefix)
                        actions_per_day['react'] -= 1
                    elif action_type == 'dialogue':
                        action_result = await _perform_dialogue_action(client, current_partner_peer_id, dialogue_phrases, log_prefix)
                        actions_per_day['dialogue'] -= 1

                    async with stats_lock:
                        if user_id in WARMER_STATS:
                            WARMER_STATS[user_id]["actions_done"] += 1
                            WARMER_STATS[user_id]["action_details"].append(action_result)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if settings.get('inform_user_on_action'):
                        try:
                            notification_text = f"üî• –ü—Ä–æ–≥—Ä–µ–≤: –°–µ—Å—Å–∏—è <code>{html.escape(phone_for_log)}</code> –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –¥–µ–π—Å—Ç–≤–∏–µ: {html.escape(action_result)}"
                            await bot.send_message(user_id, notification_text)
                        except Exception as e:
                            logger.warning(f"{log_prefix}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                except PartnerUnavailableError:
                    logger.warning(f"{log_prefix}: –ü–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫–ª—é—á–∞—é –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.")
                    current_partner_peer_id = None # Disable for future loops
                    async with stats_lock:
                        if user_id in WARMER_STATS: WARMER_STATS[user_id]["errors"] += 1
    
                except FloodWait as e:
                    wait_time = e.value
                    logger.warning(f"{log_prefix}: FloodWait –Ω–∞ {wait_time} —Å–µ–∫. –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –≤ –º—É—Ç–µ.")
                    mute_until = time.time() + wait_time + 5
                    async with SESSION_MUTE_LOCK:
                        SESSION_MUTE_UNTIL[session_name] = mute_until
    
                    # –í–æ—Ä–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç, —Ç.–∫. –æ–Ω –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π
                    await asyncio.sleep(wait_time + 5)
                except (ValueError, UserChannelsTooMuch) as e:
                    logger.warning(f"{log_prefix}: –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{action_type}': {e}")
                    async with stats_lock:
                        if user_id in WARMER_STATS:
                            WARMER_STATS[user_id]["errors"] += 1
                except Exception as e:
                    logger.error(f"{log_prefix}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{action_type}': {e}", exc_info=True)
                    async with stats_lock:
                        if user_id in WARMER_STATS:
                            WARMER_STATS[user_id]["errors"] += 1

            # 3. Sleep for a long random interval
            sleep_duration = random.uniform(3600 * 0.5, 3600 * 2) # 0.5 to 2 hours
            logger.info(f"{log_prefix}: –°–ø–ª—é –¥–æ {sleep_duration / 3600:.2f} —á–∞—Å–æ–≤.")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º wait_for –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.wait_for(stop_event.wait(), timeout=sleep_duration)
                break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ stop_event –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            except asyncio.TimeoutError:
                continue # –ü—Ä–æ—Å—ã–ø–∞–µ–º—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

    except asyncio.CancelledError:
        logger.info(f"{log_prefix}: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã.")
        # This is a clean exit, the finally block will handle disconnection.
    except (AuthKeyUnregistered, UserDeactivated) as e:
        error_name = type(e).__name__
        await record_worker_session_failure(user_id, phone_for_log, f"{error_name} (—É–¥–∞–ª–µ–Ω–∞)", stats_lock, WARMER_STATS, log_prefix, bot)
        await db_manager.delete_session(user_id, phone_for_log)
    except Exception as e:
        logger.critical(f"{log_prefix}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await record_worker_session_failure(user_id, phone_for_log, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}", stats_lock, WARMER_STATS, log_prefix, bot)
    finally:
        if client and client.is_connected:
            await client.disconnect()
        logger.info(f"{log_prefix}: –ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


async def warmer_loop_task(bot: Bot, user_id: int):
    """Main task to manage the warming process for a user."""
    log_prefix = f"WARMER_LOOP [{user_id}]"
    logger.info(f"{log_prefix}: –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞.")

    workers = []
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lock'–∞ –¥–æ –±–ª–æ–∫–∞ try –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ finally ---
    stats_lock = asyncio.Lock()

    try:
        settings = await db_manager.get_warmer_settings(user_id)
        user_data = await db_manager.get_user_data(user_id)
        sessions = user_data.get('sessions', {})
        stop_event = WARMER_STOP_EVENTS.get(user_id)
        dialogue_phrases = [p.strip() for p in settings.get('dialogue_phrases', '').split(',') if p.strip()]

        WARMER_STATS[user_id] = {
            "actions_done": 0, "errors": 0, "failed_sessions": [],
            "action_details": [], "active_sessions": len(sessions)
        }

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ---
        partner_map = {}
        session_details = []
        if settings.get('dialogue_simulation_enabled') and len(sessions) >= 2:
            logger.info(f"{log_prefix}: –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–æ–≤ –≤–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è—é –∏ —Å–ø–∞—Ä–∏–≤–∞—é —Å–µ—Å—Å–∏–∏...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è –∏—Ö peer_id
            for phone, s_path in sessions.items():
                s_name = os.path.splitext(os.path.basename(s_path))[0]
                temp_client = None
                try:
                    temp_client = await get_connected_client(user_id, s_name, no_updates=True)
                    if temp_client:
                        me = await temp_client.get_me()
                        if me and me.status != UserStatus.DEACTIVATED:
                            session_details.append({'phone': phone, 'session_name': s_name, 'peer_id': me.id})
                        await temp_client.disconnect()
                except Exception as e:
                    logger.warning(f"{log_prefix}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é {phone} –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {e}")
                    if temp_client and temp_client.is_connected: await temp_client.disconnect()

            random.shuffle(session_details)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã
            paired_sessions = deque(session_details)
            while len(paired_sessions) >= 2:
                s1 = paired_sessions.popleft()
                s2 = paired_sessions.popleft()
                partner_map[s1['session_name']] = s2['peer_id']
                partner_map[s2['session_name']] = s1['peer_id']
                logger.info(f"{log_prefix}: –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {s1['phone']} <-> {s2['phone']}")

        for phone, session_file_path in sessions.items(): # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –í–°–ï–• —Å–µ—Å—Å–∏–π
            s_name = os.path.splitext(os.path.basename(session_file_path))[0]
            partner_id = partner_map.get(s_name)
            worker = asyncio.create_task(_warmer_worker(
                bot, user_id, s_name, phone, settings, stop_event, stats_lock,
                partner_peer_id=partner_id
            ))
            workers.append(worker)
        
        # –û–∂–∏–¥–∞–µ–º –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration_seconds = settings.get('duration_days', 7) * 24 * 3600
        try:
            logger.info(f"{log_prefix}: –ü—Ä–æ–≥—Ä–µ–≤ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è {settings.get('duration_days', 7)} –¥–Ω–µ–π.")
            await asyncio.wait_for(stop_event.wait(), timeout=duration_seconds)
            logger.info(f"{log_prefix}: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except asyncio.TimeoutError:
            logger.info(f"{log_prefix}: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            if not stop_event.is_set():
                stop_event.set()

    except Exception as e:
        logger.critical(f"{log_prefix}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info(f"{log_prefix}: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞.")
        
        # Cancel all worker tasks
        for task in workers:
            task.cancel()
        await asyncio.gather(*workers, return_exceptions=True)

        # Cleanup global state
        async with WARMER_STATUS_LOCK:
            WARMER_STATUS[user_id] = False
        WARMER_STOP_EVENTS.pop(user_id, None)
        ACTIVE_WARMER_TASKS.pop(user_id, None)
        
        async with stats_lock:
            final_stats = WARMER_STATS.pop(user_id, {})

        # Send final report
        report_message = (
            f"<b>üèÅ –ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>\n\n"
            f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  - –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {final_stats.get('actions_done', 0)}\n"
            f"  - –û—à–∏–±–æ–∫: {final_stats.get('errors', 0)}\n"
        )
        failed = final_stats.get("failed_sessions", [])
        if failed:
            report_message += "\n<b>‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n"
            for f in failed:
                report_message += f"  - <code>{html.escape(f['phone'])}</code>: {html.escape(f['reason'])}\n"

        # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ---
        try:
            await bot.send_message(user_id, report_message, reply_markup=warmer_menu_keyboard(is_active=False))
        except Exception as e:
            logger.error(f"{log_prefix}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        logger.info(f"{log_prefix}: –¶–∏–∫–ª –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω.")