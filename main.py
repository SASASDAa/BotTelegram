# main.py
import asyncio
import logging
import os
import sys
import html
import traceback

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É, –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
log_format = '%(asctime)s - PID:%(process)d - %(name)s - %(levelname)s - %(message)s'
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ basicConfig —Å force=True (–¥–ª—è Python 3.8+) - —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–Ω —É–¥–∞–ª–∏—Ç
# –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç –Ω–æ–≤—ã–µ.
logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout, force=True)
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

import config
# --- –î–û–ë–ê–í–õ–ï–ù–û ---
from bot.client_tasks.client_manager import (
    ACTIVE_ATTACK_TASKS, ACTIVE_SPAM_TASKS, ACTIVE_WARMER_TASKS,
    ATTACK_STOP_EVENTS, STOP_EVENTS, WARMER_STOP_EVENTS
)
from bot.database.db_manager import db_manager
from bot.handlers import (
    admin, attack_handler, common, profile, scheduler_handler,
    scraper_handler, settings_ai, settings_chat, settings_comments, warmer_handler,
    settings_other, settings_proxy, settings_sessions, spam_handler
)
from bot.middlewares import AccessMiddleware
from bot.scheduler_manager import scheduler_manager, init_scheduler

logger = logging.getLogger(__name__)

async def perform_restart(bot: Bot):
    """Gracefully shuts down and restarts the bot process."""
    logger.info("Restart requested by admin. Shutting down...")
    await on_shutdown(bot)
    logger.info("Graceful shutdown complete. Executing restart...")
    # Using os.execv to replace the current process with a new one
    os.execv(sys.executable, ['python'] + sys.argv)

async def on_shutdown(bot: Bot):
    logger.info("Bot is shutting down. Signaling background tasks to stop...")
    all_tasks = []
    task_groups = [
        ("spam", ACTIVE_SPAM_TASKS, STOP_EVENTS),
        ("attack", ACTIVE_ATTACK_TASKS, ATTACK_STOP_EVENTS),
        ("warmer", ACTIVE_WARMER_TASKS, WARMER_STOP_EVENTS)
    ]

    for task_type, active_tasks_dict, stop_events_dict in task_groups:
        for user_id, task in list(active_tasks_dict.items()):
            if not task.done():
                logger.info(f"Signaling {task_type} task for user {user_id} to stop.")
                if user_id in stop_events_dict:
                    stop_events_dict[user_id].set()
                all_tasks.append(task)

    if all_tasks:
        logger.info(f"Waiting for {len(all_tasks)} background tasks to complete...")
        try:
            await asyncio.wait_for(asyncio.gather(*all_tasks, return_exceptions=True), timeout=30.0)
            logger.info("All background tasks finished gracefully.")
        except asyncio.TimeoutError:
            logger.warning("Graceful shutdown timed out. Forcing task cancellation.")
    
    if scheduler_manager:
        await scheduler_manager.shutdown()

    await bot.session.close()
    logger.info("Bot session closed. Shutdown complete.")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db_manager.init_db()
    logger.info("Database initialized.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage, restart_function=perform_restart)
    
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
    init_scheduler(bot)

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
    dp.shutdown.register(on_shutdown)

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –∫–∞–∫ "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ" ---
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤.
    # –≠—Ç–æ –±–æ–ª–µ–µ –ø—Ä—è–º–æ–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    access_middleware = AccessMiddleware(config.SUPER_ADMIN_ID)
    dp.message.middleware(access_middleware)
    dp.callback_query.middleware(access_middleware)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    logger.info("Registering routers...")
    dp.include_router(common.router)
    dp.include_router(profile.router)
    dp.include_router(admin.router)
    dp.include_router(scheduler_handler.router)
    dp.include_router(scraper_handler.router)
    dp.include_router(warmer_handler.router)
    dp.include_router(settings_sessions.router)
    dp.include_router(settings_chat.router)
    dp.include_router(settings_comments.router)
    dp.include_router(settings_ai.router)
    dp.include_router(settings_other.router)
    dp.include_router(settings_proxy.router)
    dp.include_router(spam_handler.router)
    dp.include_router(attack_handler.router)
    logger.info("Routers registered.")

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ ---
    try:
        await bot.send_message(config.SUPER_ADMIN_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        logger.info(f"Sent startup notification to SUPER_ADMIN_ID {config.SUPER_ADMIN_ID}")
    except Exception as e:
        logger.error(f"Could not send startup notification to SUPER_ADMIN_ID {config.SUPER_ADMIN_ID}: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await bot.delete_webhook(drop_pending_updates=True)
    if scheduler_manager:
        await scheduler_manager.start()
    logger.info("Bot starting polling...")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç–ª–æ–≤–∏—Ç –ª—é–±—É—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –æ—à–∏–±–∫—É,
    # –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç "—É—Ä–æ–Ω–∏—Ç—å" –±–æ—Ç–∞. –û–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    # –∏ –ø–æ–∑–≤–æ–ª–∏—Ç systemd –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        try:
            tb_str = traceback.format_exc()
            error_message = (
                f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!</b> üö®\n\n"
                f"–ë–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º.\n\n"
                f"<b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b>\n<code>{html.escape(type(e).__name__)}</code>\n\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<code>{html.escape(str(e))}</code>\n\n"
                f"<b>Traceback (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):</b>\n<pre>{html.escape(tb_str[-1000:])}</pre>"
            )
            await bot.send_message(config.SUPER_ADMIN_ID, error_message)
        except Exception as notify_error:
            logger.error(f"–ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ï: {notify_error}")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user (KeyboardInterrupt/SystemExit).")